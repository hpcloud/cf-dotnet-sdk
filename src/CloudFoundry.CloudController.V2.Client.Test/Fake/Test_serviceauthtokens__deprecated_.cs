//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class ServiceAuthTokensDeprecatedEndpoint
{
        [TestMethod]
        public void RetrieveServiceAuthTokenDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""e445f8fb-a1e0-44a3-a43f-e423377a6aef"",
    ""url"": ""/v2/service_auth_tokens/e445f8fb-a1e0-44a3-a43f-e423377a6aef"",
    ""created_at"": ""2016-02-09T10:21:55Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""label"": ""label-65"",
    ""provider"": ""provider-1""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.ServiceAuthTokensDeprecated.RetrieveServiceAuthTokenDeprecated(guid).Result;


                Assert.AreEqual("e445f8fb-a1e0-44a3-a43f-e423377a6aef", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_auth_tokens/e445f8fb-a1e0-44a3-a43f-e423377a6aef", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:55Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("label-65", TestUtil.ToTestableString(obj.Label), true);
                Assert.AreEqual("provider-1", TestUtil.ToTestableString(obj.Provider), true);

            }
        }

        [TestMethod]
        public void ListAllServiceAuthTokensDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 3,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""dd58d61e-8d74-45c2-b4eb-3aa5b6ae2260"",
        ""url"": ""/v2/service_auth_tokens/dd58d61e-8d74-45c2-b4eb-3aa5b6ae2260"",
        ""created_at"": ""2016-02-09T10:21:55Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""label"": ""label-68"",
        ""provider"": ""provider-4""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""4d547d90-77f1-49b1-bd78-ee9cee6f85db"",
        ""url"": ""/v2/service_auth_tokens/4d547d90-77f1-49b1-bd78-ee9cee6f85db"",
        ""created_at"": ""2016-02-09T10:21:55Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""label"": ""label-69"",
        ""provider"": ""provider-5""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""cc42d2cc-ed49-438f-9560-e1914f8fcf45"",
        ""url"": ""/v2/service_auth_tokens/cc42d2cc-ed49-438f-9560-e1914f8fcf45"",
        ""created_at"": ""2016-02-09T10:21:55Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""label"": ""label-70"",
        ""provider"": ""provider-6""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.ServiceAuthTokensDeprecated.ListAllServiceAuthTokensDeprecated().Result;

                Assert.AreEqual("3", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("dd58d61e-8d74-45c2-b4eb-3aa5b6ae2260", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_auth_tokens/dd58d61e-8d74-45c2-b4eb-3aa5b6ae2260", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:55Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("label-68", TestUtil.ToTestableString(obj[0].Label), true);
                Assert.AreEqual("provider-4", TestUtil.ToTestableString(obj[0].Provider), true);
                Assert.AreEqual("4d547d90-77f1-49b1-bd78-ee9cee6f85db", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_auth_tokens/4d547d90-77f1-49b1-bd78-ee9cee6f85db", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:55Z", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("label-69", TestUtil.ToTestableString(obj[1].Label), true);
                Assert.AreEqual("provider-5", TestUtil.ToTestableString(obj[1].Provider), true);
                Assert.AreEqual("cc42d2cc-ed49-438f-9560-e1914f8fcf45", TestUtil.ToTestableString(obj[2].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_auth_tokens/cc42d2cc-ed49-438f-9560-e1914f8fcf45", TestUtil.ToTestableString(obj[2].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:55Z", TestUtil.ToTestableString(obj[2].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[2].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("label-70", TestUtil.ToTestableString(obj[2].Label), true);
                Assert.AreEqual("provider-6", TestUtil.ToTestableString(obj[2].Provider), true);

            }
        }

        [TestMethod]
        public void DeleteServiceAuthTokenDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.ServiceAuthTokensDeprecated.DeleteServiceAuthTokenDeprecated(guid).Wait();

            }
        }

        [TestMethod]
        public void FilterResultSetByLabelDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""22377fdf-d45e-4a15-b7c0-851176ee248c"",
        ""url"": ""/v2/service_auth_tokens/22377fdf-d45e-4a15-b7c0-851176ee248c"",
        ""created_at"": ""2016-02-09T10:21:55Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""label"": ""Nic-Token"",
        ""provider"": ""provider-13""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.ServiceAuthTokensDeprecated.FilterResultSetByLabelDeprecated().Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("22377fdf-d45e-4a15-b7c0-851176ee248c", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_auth_tokens/22377fdf-d45e-4a15-b7c0-851176ee248c", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:55Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("Nic-Token", TestUtil.ToTestableString(obj[0].Label), true);
                Assert.AreEqual("provider-13", TestUtil.ToTestableString(obj[0].Provider), true);

            }
        }

        [TestMethod]
        public void FilterResultSetByProviderDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""330eb5e6-e862-49d9-b1dc-b04c63889609"",
        ""url"": ""/v2/service_auth_tokens/330eb5e6-e862-49d9-b1dc-b04c63889609"",
        ""created_at"": ""2016-02-09T10:21:55Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""label"": ""label-74"",
        ""provider"": ""Face-Offer""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.ServiceAuthTokensDeprecated.FilterResultSetByProviderDeprecated().Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("330eb5e6-e862-49d9-b1dc-b04c63889609", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_auth_tokens/330eb5e6-e862-49d9-b1dc-b04c63889609", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:55Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("label-74", TestUtil.ToTestableString(obj[0].Label), true);
                Assert.AreEqual("Face-Offer", TestUtil.ToTestableString(obj[0].Provider), true);

            }
        }

    }
}