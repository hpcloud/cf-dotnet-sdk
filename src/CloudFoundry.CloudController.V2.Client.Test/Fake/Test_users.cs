//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class UsersEndpoint
{
        [TestMethod]
        public void RemoveManagedOrganizationFromUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""uaa-id-223"",
    ""url"": ""/v2/users/uaa-id-223"",
    ""created_at"": ""2016-02-09T10:21:50Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""ab22140d-12b3-4d2d-94c2-0b3d769947ce"",
    ""default_space_url"": ""/v2/spaces/ab22140d-12b3-4d2d-94c2-0b3d769947ce"",
    ""spaces_url"": ""/v2/users/uaa-id-223/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-223/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-223/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-223/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-223/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-223/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-223/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? managed_organization_guid = Guid.NewGuid();


                var obj = cfClient.Users.RemoveManagedOrganizationFromUser(guid, managed_organization_guid).Result;


                Assert.AreEqual("uaa-id-223", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-223", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:50Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("ab22140d-12b3-4d2d-94c2-0b3d769947ce", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/ab22140d-12b3-4d2d-94c2-0b3d769947ce", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-223/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-223/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-223/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-223/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-223/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-223/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-223/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllSpacesForUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""ff0c46e2-4dca-45ca-bd82-a80e2fb77e8a"",
        ""url"": ""/v2/spaces/ff0c46e2-4dca-45ca-bd82-a80e2fb77e8a"",
        ""created_at"": ""2016-02-09T10:21:51Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1578"",
        ""organization_guid"": ""d85eae9f-1c42-4c78-802f-048dd2f8fb9c"",
        ""space_quota_definition_guid"": null,
        ""organization_url"": ""/v2/organizations/d85eae9f-1c42-4c78-802f-048dd2f8fb9c"",
        ""developers_url"": ""/v2/spaces/ff0c46e2-4dca-45ca-bd82-a80e2fb77e8a/developers"",
        ""managers_url"": ""/v2/spaces/ff0c46e2-4dca-45ca-bd82-a80e2fb77e8a/managers"",
        ""auditors_url"": ""/v2/spaces/ff0c46e2-4dca-45ca-bd82-a80e2fb77e8a/auditors"",
        ""apps_url"": ""/v2/spaces/ff0c46e2-4dca-45ca-bd82-a80e2fb77e8a/apps"",
        ""routes_url"": ""/v2/spaces/ff0c46e2-4dca-45ca-bd82-a80e2fb77e8a/routes"",
        ""domains_url"": ""/v2/spaces/ff0c46e2-4dca-45ca-bd82-a80e2fb77e8a/domains"",
        ""service_instances_url"": ""/v2/spaces/ff0c46e2-4dca-45ca-bd82-a80e2fb77e8a/service_instances"",
        ""app_events_url"": ""/v2/spaces/ff0c46e2-4dca-45ca-bd82-a80e2fb77e8a/app_events"",
        ""events_url"": ""/v2/spaces/ff0c46e2-4dca-45ca-bd82-a80e2fb77e8a/events"",
        ""security_groups_url"": ""/v2/spaces/ff0c46e2-4dca-45ca-bd82-a80e2fb77e8a/security_groups""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Users.ListAllSpacesForUser(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("ff0c46e2-4dca-45ca-bd82-a80e2fb77e8a", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/ff0c46e2-4dca-45ca-bd82-a80e2fb77e8a", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:51Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1578", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("d85eae9f-1c42-4c78-802f-048dd2f8fb9c", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/d85eae9f-1c42-4c78-802f-048dd2f8fb9c", TestUtil.ToTestableString(obj[0].OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/ff0c46e2-4dca-45ca-bd82-a80e2fb77e8a/developers", TestUtil.ToTestableString(obj[0].DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/ff0c46e2-4dca-45ca-bd82-a80e2fb77e8a/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/ff0c46e2-4dca-45ca-bd82-a80e2fb77e8a/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/ff0c46e2-4dca-45ca-bd82-a80e2fb77e8a/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);
                Assert.AreEqual("/v2/spaces/ff0c46e2-4dca-45ca-bd82-a80e2fb77e8a/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/ff0c46e2-4dca-45ca-bd82-a80e2fb77e8a/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/ff0c46e2-4dca-45ca-bd82-a80e2fb77e8a/service_instances", TestUtil.ToTestableString(obj[0].ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/ff0c46e2-4dca-45ca-bd82-a80e2fb77e8a/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/ff0c46e2-4dca-45ca-bd82-a80e2fb77e8a/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/spaces/ff0c46e2-4dca-45ca-bd82-a80e2fb77e8a/security_groups", TestUtil.ToTestableString(obj[0].SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void AssociateOrganizationWithUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""uaa-id-207"",
    ""url"": ""/v2/users/uaa-id-207"",
    ""created_at"": ""2016-02-09T10:21:50Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""fcb94fd2-df0b-4b08-8d56-68f5059f53b7"",
    ""default_space_url"": ""/v2/spaces/fcb94fd2-df0b-4b08-8d56-68f5059f53b7"",
    ""spaces_url"": ""/v2/users/uaa-id-207/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-207/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-207/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-207/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-207/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-207/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-207/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? organization_guid = Guid.NewGuid();


                var obj = cfClient.Users.AssociateOrganizationWithUser(guid, organization_guid).Result;


                Assert.AreEqual("uaa-id-207", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-207", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:50Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("fcb94fd2-df0b-4b08-8d56-68f5059f53b7", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/fcb94fd2-df0b-4b08-8d56-68f5059f53b7", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-207/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-207/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-207/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-207/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-207/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-207/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-207/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void AssociateAuditedOrganizationWithUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""uaa-id-234"",
    ""url"": ""/v2/users/uaa-id-234"",
    ""created_at"": ""2016-02-09T10:21:51Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""bc6f2564-9f5b-4c47-90b2-6fdc96a05ac7"",
    ""default_space_url"": ""/v2/spaces/bc6f2564-9f5b-4c47-90b2-6fdc96a05ac7"",
    ""spaces_url"": ""/v2/users/uaa-id-234/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-234/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-234/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-234/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-234/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-234/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-234/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? audited_organization_guid = Guid.NewGuid();


                var obj = cfClient.Users.AssociateAuditedOrganizationWithUser(guid, audited_organization_guid).Result;


                Assert.AreEqual("uaa-id-234", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-234", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:51Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("bc6f2564-9f5b-4c47-90b2-6fdc96a05ac7", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/bc6f2564-9f5b-4c47-90b2-6fdc96a05ac7", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-234/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-234/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-234/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-234/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-234/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-234/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-234/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllAuditedSpacesForUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""0fbbca75-42a5-4d85-8b01-425f245ce283"",
        ""url"": ""/v2/spaces/0fbbca75-42a5-4d85-8b01-425f245ce283"",
        ""created_at"": ""2016-02-09T10:21:51Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1617"",
        ""organization_guid"": ""e3e7839b-ddb4-4233-9c94-72f06cd34b20"",
        ""space_quota_definition_guid"": null,
        ""organization_url"": ""/v2/organizations/e3e7839b-ddb4-4233-9c94-72f06cd34b20"",
        ""developers_url"": ""/v2/spaces/0fbbca75-42a5-4d85-8b01-425f245ce283/developers"",
        ""managers_url"": ""/v2/spaces/0fbbca75-42a5-4d85-8b01-425f245ce283/managers"",
        ""auditors_url"": ""/v2/spaces/0fbbca75-42a5-4d85-8b01-425f245ce283/auditors"",
        ""apps_url"": ""/v2/spaces/0fbbca75-42a5-4d85-8b01-425f245ce283/apps"",
        ""routes_url"": ""/v2/spaces/0fbbca75-42a5-4d85-8b01-425f245ce283/routes"",
        ""domains_url"": ""/v2/spaces/0fbbca75-42a5-4d85-8b01-425f245ce283/domains"",
        ""service_instances_url"": ""/v2/spaces/0fbbca75-42a5-4d85-8b01-425f245ce283/service_instances"",
        ""app_events_url"": ""/v2/spaces/0fbbca75-42a5-4d85-8b01-425f245ce283/app_events"",
        ""events_url"": ""/v2/spaces/0fbbca75-42a5-4d85-8b01-425f245ce283/events"",
        ""security_groups_url"": ""/v2/spaces/0fbbca75-42a5-4d85-8b01-425f245ce283/security_groups""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Users.ListAllAuditedSpacesForUser(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("0fbbca75-42a5-4d85-8b01-425f245ce283", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/0fbbca75-42a5-4d85-8b01-425f245ce283", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:51Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1617", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("e3e7839b-ddb4-4233-9c94-72f06cd34b20", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/e3e7839b-ddb4-4233-9c94-72f06cd34b20", TestUtil.ToTestableString(obj[0].OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/0fbbca75-42a5-4d85-8b01-425f245ce283/developers", TestUtil.ToTestableString(obj[0].DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/0fbbca75-42a5-4d85-8b01-425f245ce283/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/0fbbca75-42a5-4d85-8b01-425f245ce283/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/0fbbca75-42a5-4d85-8b01-425f245ce283/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);
                Assert.AreEqual("/v2/spaces/0fbbca75-42a5-4d85-8b01-425f245ce283/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/0fbbca75-42a5-4d85-8b01-425f245ce283/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/0fbbca75-42a5-4d85-8b01-425f245ce283/service_instances", TestUtil.ToTestableString(obj[0].ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/0fbbca75-42a5-4d85-8b01-425f245ce283/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/0fbbca75-42a5-4d85-8b01-425f245ce283/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/spaces/0fbbca75-42a5-4d85-8b01-425f245ce283/security_groups", TestUtil.ToTestableString(obj[0].SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void DeleteUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.Users.DeleteUser(guid).Wait();

            }
        }

        [TestMethod]
        public void ListAllBillingManagedOrganizationsForUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""64fab6de-4b80-4b9e-861d-2160740f089f"",
        ""url"": ""/v2/organizations/64fab6de-4b80-4b9e-861d-2160740f089f"",
        ""created_at"": ""2016-02-09T10:21:50Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1494"",
        ""billing_enabled"": false,
        ""quota_definition_guid"": ""fda1a17e-e825-444f-bf98-ef8ca402ba73"",
        ""status"": ""active"",
        ""quota_definition_url"": ""/v2/quota_definitions/fda1a17e-e825-444f-bf98-ef8ca402ba73"",
        ""spaces_url"": ""/v2/organizations/64fab6de-4b80-4b9e-861d-2160740f089f/spaces"",
        ""domains_url"": ""/v2/organizations/64fab6de-4b80-4b9e-861d-2160740f089f/domains"",
        ""private_domains_url"": ""/v2/organizations/64fab6de-4b80-4b9e-861d-2160740f089f/private_domains"",
        ""users_url"": ""/v2/organizations/64fab6de-4b80-4b9e-861d-2160740f089f/users"",
        ""managers_url"": ""/v2/organizations/64fab6de-4b80-4b9e-861d-2160740f089f/managers"",
        ""billing_managers_url"": ""/v2/organizations/64fab6de-4b80-4b9e-861d-2160740f089f/billing_managers"",
        ""auditors_url"": ""/v2/organizations/64fab6de-4b80-4b9e-861d-2160740f089f/auditors"",
        ""app_events_url"": ""/v2/organizations/64fab6de-4b80-4b9e-861d-2160740f089f/app_events"",
        ""space_quota_definitions_url"": ""/v2/organizations/64fab6de-4b80-4b9e-861d-2160740f089f/space_quota_definitions""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Users.ListAllBillingManagedOrganizationsForUser(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("64fab6de-4b80-4b9e-861d-2160740f089f", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/64fab6de-4b80-4b9e-861d-2160740f089f", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:50Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1494", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].BillingEnabled), true);
                Assert.AreEqual("fda1a17e-e825-444f-bf98-ef8ca402ba73", TestUtil.ToTestableString(obj[0].QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj[0].Status), true);
                Assert.AreEqual("/v2/quota_definitions/fda1a17e-e825-444f-bf98-ef8ca402ba73", TestUtil.ToTestableString(obj[0].QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/64fab6de-4b80-4b9e-861d-2160740f089f/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/64fab6de-4b80-4b9e-861d-2160740f089f/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/64fab6de-4b80-4b9e-861d-2160740f089f/private_domains", TestUtil.ToTestableString(obj[0].PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/64fab6de-4b80-4b9e-861d-2160740f089f/users", TestUtil.ToTestableString(obj[0].UsersUrl), true);
                Assert.AreEqual("/v2/organizations/64fab6de-4b80-4b9e-861d-2160740f089f/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/64fab6de-4b80-4b9e-861d-2160740f089f/billing_managers", TestUtil.ToTestableString(obj[0].BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/64fab6de-4b80-4b9e-861d-2160740f089f/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/64fab6de-4b80-4b9e-861d-2160740f089f/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/64fab6de-4b80-4b9e-861d-2160740f089f/space_quota_definitions", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveOrganizationFromUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""uaa-id-209"",
    ""url"": ""/v2/users/uaa-id-209"",
    ""created_at"": ""2016-02-09T10:21:50Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""0836d801-cc26-4b4a-acda-787ef6b46289"",
    ""default_space_url"": ""/v2/spaces/0836d801-cc26-4b4a-acda-787ef6b46289"",
    ""spaces_url"": ""/v2/users/uaa-id-209/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-209/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-209/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-209/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-209/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-209/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-209/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? organization_guid = Guid.NewGuid();


                var obj = cfClient.Users.RemoveOrganizationFromUser(guid, organization_guid).Result;


                Assert.AreEqual("uaa-id-209", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-209", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:50Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("0836d801-cc26-4b4a-acda-787ef6b46289", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/0836d801-cc26-4b4a-acda-787ef6b46289", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-209/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-209/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-209/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-209/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-209/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-209/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-209/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void AssociateSpaceWithUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""uaa-id-228"",
    ""url"": ""/v2/users/uaa-id-228"",
    ""created_at"": ""2016-02-09T10:21:51Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""91920c63-4bf4-498a-8566-c7331e2d73af"",
    ""default_space_url"": ""/v2/spaces/91920c63-4bf4-498a-8566-c7331e2d73af"",
    ""spaces_url"": ""/v2/users/uaa-id-228/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-228/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-228/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-228/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-228/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-228/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-228/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? space_guid = Guid.NewGuid();


                var obj = cfClient.Users.AssociateSpaceWithUser(guid, space_guid).Result;


                Assert.AreEqual("uaa-id-228", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-228", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:51Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("91920c63-4bf4-498a-8566-c7331e2d73af", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/91920c63-4bf4-498a-8566-c7331e2d73af", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-228/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-228/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-228/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-228/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-228/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-228/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-228/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void RemoveSpaceFromUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""uaa-id-230"",
    ""url"": ""/v2/users/uaa-id-230"",
    ""created_at"": ""2016-02-09T10:21:51Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""f1b2d75c-7dd6-43aa-8351-ef00783f3d75"",
    ""default_space_url"": ""/v2/spaces/f1b2d75c-7dd6-43aa-8351-ef00783f3d75"",
    ""spaces_url"": ""/v2/users/uaa-id-230/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-230/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-230/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-230/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-230/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-230/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-230/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? space_guid = Guid.NewGuid();


                var obj = cfClient.Users.RemoveSpaceFromUser(guid, space_guid).Result;


                Assert.AreEqual("uaa-id-230", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-230", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:51Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("f1b2d75c-7dd6-43aa-8351-ef00783f3d75", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/f1b2d75c-7dd6-43aa-8351-ef00783f3d75", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-230/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-230/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-230/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-230/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-230/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-230/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-230/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllManagedSpacesForUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""08a49382-b6b8-417f-b94a-30a2b94d35ce"",
        ""url"": ""/v2/spaces/08a49382-b6b8-417f-b94a-30a2b94d35ce"",
        ""created_at"": ""2016-02-09T10:21:50Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1530"",
        ""organization_guid"": ""5b76ed88-5b68-411a-aaf4-aa621c1bcfa5"",
        ""space_quota_definition_guid"": null,
        ""organization_url"": ""/v2/organizations/5b76ed88-5b68-411a-aaf4-aa621c1bcfa5"",
        ""developers_url"": ""/v2/spaces/08a49382-b6b8-417f-b94a-30a2b94d35ce/developers"",
        ""managers_url"": ""/v2/spaces/08a49382-b6b8-417f-b94a-30a2b94d35ce/managers"",
        ""auditors_url"": ""/v2/spaces/08a49382-b6b8-417f-b94a-30a2b94d35ce/auditors"",
        ""apps_url"": ""/v2/spaces/08a49382-b6b8-417f-b94a-30a2b94d35ce/apps"",
        ""routes_url"": ""/v2/spaces/08a49382-b6b8-417f-b94a-30a2b94d35ce/routes"",
        ""domains_url"": ""/v2/spaces/08a49382-b6b8-417f-b94a-30a2b94d35ce/domains"",
        ""service_instances_url"": ""/v2/spaces/08a49382-b6b8-417f-b94a-30a2b94d35ce/service_instances"",
        ""app_events_url"": ""/v2/spaces/08a49382-b6b8-417f-b94a-30a2b94d35ce/app_events"",
        ""events_url"": ""/v2/spaces/08a49382-b6b8-417f-b94a-30a2b94d35ce/events"",
        ""security_groups_url"": ""/v2/spaces/08a49382-b6b8-417f-b94a-30a2b94d35ce/security_groups""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Users.ListAllManagedSpacesForUser(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("08a49382-b6b8-417f-b94a-30a2b94d35ce", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/08a49382-b6b8-417f-b94a-30a2b94d35ce", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:50Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1530", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("5b76ed88-5b68-411a-aaf4-aa621c1bcfa5", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/5b76ed88-5b68-411a-aaf4-aa621c1bcfa5", TestUtil.ToTestableString(obj[0].OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/08a49382-b6b8-417f-b94a-30a2b94d35ce/developers", TestUtil.ToTestableString(obj[0].DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/08a49382-b6b8-417f-b94a-30a2b94d35ce/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/08a49382-b6b8-417f-b94a-30a2b94d35ce/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/08a49382-b6b8-417f-b94a-30a2b94d35ce/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);
                Assert.AreEqual("/v2/spaces/08a49382-b6b8-417f-b94a-30a2b94d35ce/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/08a49382-b6b8-417f-b94a-30a2b94d35ce/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/08a49382-b6b8-417f-b94a-30a2b94d35ce/service_instances", TestUtil.ToTestableString(obj[0].ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/08a49382-b6b8-417f-b94a-30a2b94d35ce/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/08a49382-b6b8-417f-b94a-30a2b94d35ce/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/spaces/08a49382-b6b8-417f-b94a-30a2b94d35ce/security_groups", TestUtil.ToTestableString(obj[0].SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void CreateUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""guid-c983440d-f03b-445c-9648-ae0f40a10195"",
    ""url"": ""/v2/users/guid-c983440d-f03b-445c-9648-ae0f40a10195"",
    ""created_at"": ""2016-02-09T10:21:51Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": null,
    ""spaces_url"": ""/v2/users/guid-c983440d-f03b-445c-9648-ae0f40a10195/spaces"",
    ""organizations_url"": ""/v2/users/guid-c983440d-f03b-445c-9648-ae0f40a10195/organizations"",
    ""managed_organizations_url"": ""/v2/users/guid-c983440d-f03b-445c-9648-ae0f40a10195/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/guid-c983440d-f03b-445c-9648-ae0f40a10195/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/guid-c983440d-f03b-445c-9648-ae0f40a10195/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/guid-c983440d-f03b-445c-9648-ae0f40a10195/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/guid-c983440d-f03b-445c-9648-ae0f40a10195/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateUserRequest value = new CreateUserRequest();


                var obj = cfClient.Users.CreateUser(value).Result;


                Assert.AreEqual("guid-c983440d-f03b-445c-9648-ae0f40a10195", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/guid-c983440d-f03b-445c-9648-ae0f40a10195", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:51Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/users/guid-c983440d-f03b-445c-9648-ae0f40a10195/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/guid-c983440d-f03b-445c-9648-ae0f40a10195/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/guid-c983440d-f03b-445c-9648-ae0f40a10195/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/guid-c983440d-f03b-445c-9648-ae0f40a10195/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/guid-c983440d-f03b-445c-9648-ae0f40a10195/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/guid-c983440d-f03b-445c-9648-ae0f40a10195/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/guid-c983440d-f03b-445c-9648-ae0f40a10195/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void RemoveManagedSpaceFromUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""uaa-id-215"",
    ""url"": ""/v2/users/uaa-id-215"",
    ""created_at"": ""2016-02-09T10:21:50Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""2413f90f-a323-4afb-b587-3bd0a68cb4fd"",
    ""default_space_url"": ""/v2/spaces/2413f90f-a323-4afb-b587-3bd0a68cb4fd"",
    ""spaces_url"": ""/v2/users/uaa-id-215/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-215/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-215/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-215/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-215/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-215/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-215/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? managed_space_guid = Guid.NewGuid();


                var obj = cfClient.Users.RemoveManagedSpaceFromUser(guid, managed_space_guid).Result;


                Assert.AreEqual("uaa-id-215", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-215", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:50Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("2413f90f-a323-4afb-b587-3bd0a68cb4fd", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/2413f90f-a323-4afb-b587-3bd0a68cb4fd", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-215/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-215/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-215/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-215/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-215/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-215/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-215/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllOrganizationsForUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""20733973-43e8-4a95-84a9-ad8e6ab5b5ce"",
        ""url"": ""/v2/organizations/20733973-43e8-4a95-84a9-ad8e6ab5b5ce"",
        ""created_at"": ""2016-02-09T10:21:50Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1513"",
        ""billing_enabled"": false,
        ""quota_definition_guid"": ""0fdaedd8-85c8-4f74-9dd1-16308ba40dd1"",
        ""status"": ""active"",
        ""quota_definition_url"": ""/v2/quota_definitions/0fdaedd8-85c8-4f74-9dd1-16308ba40dd1"",
        ""spaces_url"": ""/v2/organizations/20733973-43e8-4a95-84a9-ad8e6ab5b5ce/spaces"",
        ""domains_url"": ""/v2/organizations/20733973-43e8-4a95-84a9-ad8e6ab5b5ce/domains"",
        ""private_domains_url"": ""/v2/organizations/20733973-43e8-4a95-84a9-ad8e6ab5b5ce/private_domains"",
        ""users_url"": ""/v2/organizations/20733973-43e8-4a95-84a9-ad8e6ab5b5ce/users"",
        ""managers_url"": ""/v2/organizations/20733973-43e8-4a95-84a9-ad8e6ab5b5ce/managers"",
        ""billing_managers_url"": ""/v2/organizations/20733973-43e8-4a95-84a9-ad8e6ab5b5ce/billing_managers"",
        ""auditors_url"": ""/v2/organizations/20733973-43e8-4a95-84a9-ad8e6ab5b5ce/auditors"",
        ""app_events_url"": ""/v2/organizations/20733973-43e8-4a95-84a9-ad8e6ab5b5ce/app_events"",
        ""space_quota_definitions_url"": ""/v2/organizations/20733973-43e8-4a95-84a9-ad8e6ab5b5ce/space_quota_definitions""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Users.ListAllOrganizationsForUser(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("20733973-43e8-4a95-84a9-ad8e6ab5b5ce", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/20733973-43e8-4a95-84a9-ad8e6ab5b5ce", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:50Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1513", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].BillingEnabled), true);
                Assert.AreEqual("0fdaedd8-85c8-4f74-9dd1-16308ba40dd1", TestUtil.ToTestableString(obj[0].QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj[0].Status), true);
                Assert.AreEqual("/v2/quota_definitions/0fdaedd8-85c8-4f74-9dd1-16308ba40dd1", TestUtil.ToTestableString(obj[0].QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/20733973-43e8-4a95-84a9-ad8e6ab5b5ce/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/20733973-43e8-4a95-84a9-ad8e6ab5b5ce/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/20733973-43e8-4a95-84a9-ad8e6ab5b5ce/private_domains", TestUtil.ToTestableString(obj[0].PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/20733973-43e8-4a95-84a9-ad8e6ab5b5ce/users", TestUtil.ToTestableString(obj[0].UsersUrl), true);
                Assert.AreEqual("/v2/organizations/20733973-43e8-4a95-84a9-ad8e6ab5b5ce/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/20733973-43e8-4a95-84a9-ad8e6ab5b5ce/billing_managers", TestUtil.ToTestableString(obj[0].BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/20733973-43e8-4a95-84a9-ad8e6ab5b5ce/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/20733973-43e8-4a95-84a9-ad8e6ab5b5ce/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/20733973-43e8-4a95-84a9-ad8e6ab5b5ce/space_quota_definitions", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void AssociateAuditedSpaceWithUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""uaa-id-240"",
    ""url"": ""/v2/users/uaa-id-240"",
    ""created_at"": ""2016-02-09T10:21:51Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""96d73ed5-e442-4ff3-8114-5e9dfa12111f"",
    ""default_space_url"": ""/v2/spaces/96d73ed5-e442-4ff3-8114-5e9dfa12111f"",
    ""spaces_url"": ""/v2/users/uaa-id-240/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-240/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-240/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-240/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-240/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-240/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-240/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? audited_space_guid = Guid.NewGuid();


                var obj = cfClient.Users.AssociateAuditedSpaceWithUser(guid, audited_space_guid).Result;


                Assert.AreEqual("uaa-id-240", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-240", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:51Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("96d73ed5-e442-4ff3-8114-5e9dfa12111f", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/96d73ed5-e442-4ff3-8114-5e9dfa12111f", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-240/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-240/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-240/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-240/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-240/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-240/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-240/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllManagedOrganizationsForUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""98837356-8a5a-49ec-bdb5-10b0384e0f61"",
        ""url"": ""/v2/organizations/98837356-8a5a-49ec-bdb5-10b0384e0f61"",
        ""created_at"": ""2016-02-09T10:21:50Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1559"",
        ""billing_enabled"": false,
        ""quota_definition_guid"": ""1582bc0d-7efc-440c-b543-36d59b207818"",
        ""status"": ""active"",
        ""quota_definition_url"": ""/v2/quota_definitions/1582bc0d-7efc-440c-b543-36d59b207818"",
        ""spaces_url"": ""/v2/organizations/98837356-8a5a-49ec-bdb5-10b0384e0f61/spaces"",
        ""domains_url"": ""/v2/organizations/98837356-8a5a-49ec-bdb5-10b0384e0f61/domains"",
        ""private_domains_url"": ""/v2/organizations/98837356-8a5a-49ec-bdb5-10b0384e0f61/private_domains"",
        ""users_url"": ""/v2/organizations/98837356-8a5a-49ec-bdb5-10b0384e0f61/users"",
        ""managers_url"": ""/v2/organizations/98837356-8a5a-49ec-bdb5-10b0384e0f61/managers"",
        ""billing_managers_url"": ""/v2/organizations/98837356-8a5a-49ec-bdb5-10b0384e0f61/billing_managers"",
        ""auditors_url"": ""/v2/organizations/98837356-8a5a-49ec-bdb5-10b0384e0f61/auditors"",
        ""app_events_url"": ""/v2/organizations/98837356-8a5a-49ec-bdb5-10b0384e0f61/app_events"",
        ""space_quota_definitions_url"": ""/v2/organizations/98837356-8a5a-49ec-bdb5-10b0384e0f61/space_quota_definitions""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Users.ListAllManagedOrganizationsForUser(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("98837356-8a5a-49ec-bdb5-10b0384e0f61", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/98837356-8a5a-49ec-bdb5-10b0384e0f61", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:50Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1559", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].BillingEnabled), true);
                Assert.AreEqual("1582bc0d-7efc-440c-b543-36d59b207818", TestUtil.ToTestableString(obj[0].QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj[0].Status), true);
                Assert.AreEqual("/v2/quota_definitions/1582bc0d-7efc-440c-b543-36d59b207818", TestUtil.ToTestableString(obj[0].QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/98837356-8a5a-49ec-bdb5-10b0384e0f61/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/98837356-8a5a-49ec-bdb5-10b0384e0f61/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/98837356-8a5a-49ec-bdb5-10b0384e0f61/private_domains", TestUtil.ToTestableString(obj[0].PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/98837356-8a5a-49ec-bdb5-10b0384e0f61/users", TestUtil.ToTestableString(obj[0].UsersUrl), true);
                Assert.AreEqual("/v2/organizations/98837356-8a5a-49ec-bdb5-10b0384e0f61/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/98837356-8a5a-49ec-bdb5-10b0384e0f61/billing_managers", TestUtil.ToTestableString(obj[0].BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/98837356-8a5a-49ec-bdb5-10b0384e0f61/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/98837356-8a5a-49ec-bdb5-10b0384e0f61/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/98837356-8a5a-49ec-bdb5-10b0384e0f61/space_quota_definitions", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void AssociateManagedOrganizationWithUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""uaa-id-220"",
    ""url"": ""/v2/users/uaa-id-220"",
    ""created_at"": ""2016-02-09T10:21:50Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""7353d44b-2d29-4a64-81f6-a5a1b60a31f7"",
    ""default_space_url"": ""/v2/spaces/7353d44b-2d29-4a64-81f6-a5a1b60a31f7"",
    ""spaces_url"": ""/v2/users/uaa-id-220/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-220/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-220/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-220/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-220/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-220/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-220/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? managed_organization_guid = Guid.NewGuid();


                var obj = cfClient.Users.AssociateManagedOrganizationWithUser(guid, managed_organization_guid).Result;


                Assert.AreEqual("uaa-id-220", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-220", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:50Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("7353d44b-2d29-4a64-81f6-a5a1b60a31f7", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/7353d44b-2d29-4a64-81f6-a5a1b60a31f7", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-220/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-220/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-220/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-220/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-220/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-220/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-220/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void AssociateBillingManagedOrganizationWithUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""uaa-id-201"",
    ""url"": ""/v2/users/uaa-id-201"",
    ""created_at"": ""2016-02-09T10:21:50Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""fa090a01-2104-4e2f-a41f-42df051b8547"",
    ""default_space_url"": ""/v2/spaces/fa090a01-2104-4e2f-a41f-42df051b8547"",
    ""spaces_url"": ""/v2/users/uaa-id-201/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-201/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-201/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-201/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-201/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-201/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-201/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? billing_managed_organization_guid = Guid.NewGuid();


                var obj = cfClient.Users.AssociateBillingManagedOrganizationWithUser(guid, billing_managed_organization_guid).Result;


                Assert.AreEqual("uaa-id-201", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-201", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:50Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("fa090a01-2104-4e2f-a41f-42df051b8547", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/fa090a01-2104-4e2f-a41f-42df051b8547", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-201/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-201/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-201/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-201/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-201/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-201/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-201/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void RemoveBillingManagedOrganizationFromUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""uaa-id-203"",
    ""url"": ""/v2/users/uaa-id-203"",
    ""created_at"": ""2016-02-09T10:21:50Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""df7178da-44b1-4780-a5cb-215142335b04"",
    ""default_space_url"": ""/v2/spaces/df7178da-44b1-4780-a5cb-215142335b04"",
    ""spaces_url"": ""/v2/users/uaa-id-203/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-203/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-203/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-203/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-203/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-203/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-203/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? billing_managed_organization_guid = Guid.NewGuid();


                var obj = cfClient.Users.RemoveBillingManagedOrganizationFromUser(guid, billing_managed_organization_guid).Result;


                Assert.AreEqual("uaa-id-203", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-203", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:50Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("df7178da-44b1-4780-a5cb-215142335b04", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/df7178da-44b1-4780-a5cb-215142335b04", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-203/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-203/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-203/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-203/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-203/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-203/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-203/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void GetUserSummaryTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{""metadata"":{""guid"":""uaa-id-256"",""created_at"":""2016-02-09T10:21:51Z"",""updated_at"":null},""entity"":{""organizations"":[{""metadata"":{""guid"":""c1ef12e3-8bb7-48e0-a127-8fa46c29200c"",""created_at"":""2016-02-09T10:21:51Z"",""updated_at"":null},""entity"":{""name"":""name-1664"",""billing_enabled"":false,""status"":""active"",""spaces"":[{""metadata"":{""guid"":""2b3ceba5-9906-4713-a26e-355fdf261a55"",""created_at"":""2016-02-09T10:21:51Z"",""updated_at"":null},""entity"":{""name"":""name-1666""}}],""quota_definition"":{""metadata"":{""guid"":""f5894e5e-0d7d-4565-9378-03a4046dd575"",""created_at"":""2016-02-09T10:21:51Z"",""updated_at"":null},""entity"":{""name"":""name-1665"",""non_basic_services_allowed"":true,""total_services"":60,""memory_limit"":20480,""trial_db_allowed"":false}},""managers"":[{""metadata"":{""guid"":""uaa-id-256"",""created_at"":""2016-02-09T10:21:51Z"",""updated_at"":null},""entity"":{""admin"":false,""active"":false,""default_space_guid"":null}}]}}],""managed_organizations"":[{""metadata"":{""guid"":""c1ef12e3-8bb7-48e0-a127-8fa46c29200c"",""created_at"":""2016-02-09T10:21:51Z"",""updated_at"":null},""entity"":{""name"":""name-1664"",""billing_enabled"":false,""status"":""active"",""spaces"":[{""metadata"":{""guid"":""2b3ceba5-9906-4713-a26e-355fdf261a55"",""created_at"":""2016-02-09T10:21:51Z"",""updated_at"":null},""entity"":{""name"":""name-1666""}}],""quota_definition"":{""metadata"":{""guid"":""f5894e5e-0d7d-4565-9378-03a4046dd575"",""created_at"":""2016-02-09T10:21:51Z"",""updated_at"":null},""entity"":{""name"":""name-1665"",""non_basic_services_allowed"":true,""total_services"":60,""memory_limit"":20480,""trial_db_allowed"":false}},""managers"":[{""metadata"":{""guid"":""uaa-id-256"",""created_at"":""2016-02-09T10:21:51Z"",""updated_at"":null},""entity"":{""admin"":false,""active"":false,""default_space_guid"":null}}]}}],""billing_managed_organizations"":[{""metadata"":{""guid"":""c1ef12e3-8bb7-48e0-a127-8fa46c29200c"",""created_at"":""2016-02-09T10:21:51Z"",""updated_at"":null},""entity"":{""name"":""name-1664"",""billing_enabled"":false,""status"":""active"",""spaces"":[{""metadata"":{""guid"":""2b3ceba5-9906-4713-a26e-355fdf261a55"",""created_at"":""2016-02-09T10:21:51Z"",""updated_at"":null},""entity"":{""name"":""name-1666""}}],""quota_definition"":{""metadata"":{""guid"":""f5894e5e-0d7d-4565-9378-03a4046dd575"",""created_at"":""2016-02-09T10:21:51Z"",""updated_at"":null},""entity"":{""name"":""name-1665"",""non_basic_services_allowed"":true,""total_services"":60,""memory_limit"":20480,""trial_db_allowed"":false}},""managers"":[{""metadata"":{""guid"":""uaa-id-256"",""created_at"":""2016-02-09T10:21:51Z"",""updated_at"":null},""entity"":{""admin"":false,""active"":false,""default_space_guid"":null}}]}}],""audited_organizations"":[{""metadata"":{""guid"":""c1ef12e3-8bb7-48e0-a127-8fa46c29200c"",""created_at"":""2016-02-09T10:21:51Z"",""updated_at"":null},""entity"":{""name"":""name-1664"",""billing_enabled"":false,""status"":""active"",""spaces"":[{""metadata"":{""guid"":""2b3ceba5-9906-4713-a26e-355fdf261a55"",""created_at"":""2016-02-09T10:21:51Z"",""updated_at"":null},""entity"":{""name"":""name-1666""}}],""quota_definition"":{""metadata"":{""guid"":""f5894e5e-0d7d-4565-9378-03a4046dd575"",""created_at"":""2016-02-09T10:21:51Z"",""updated_at"":null},""entity"":{""name"":""name-1665"",""non_basic_services_allowed"":true,""total_services"":60,""memory_limit"":20480,""trial_db_allowed"":false}},""managers"":[{""metadata"":{""guid"":""uaa-id-256"",""created_at"":""2016-02-09T10:21:51Z"",""updated_at"":null},""entity"":{""admin"":false,""active"":false,""default_space_guid"":null}}]}}],""spaces"":[{""metadata"":{""guid"":""2b3ceba5-9906-4713-a26e-355fdf261a55"",""created_at"":""2016-02-09T10:21:51Z"",""updated_at"":null},""entity"":{""name"":""name-1666""}}],""managed_spaces"":[{""metadata"":{""guid"":""2b3ceba5-9906-4713-a26e-355fdf261a55"",""created_at"":""2016-02-09T10:21:51Z"",""updated_at"":null},""entity"":{""name"":""name-1666""}}],""audited_spaces"":[{""metadata"":{""guid"":""2b3ceba5-9906-4713-a26e-355fdf261a55"",""created_at"":""2016-02-09T10:21:51Z"",""updated_at"":null},""entity"":{""name"":""name-1666""}}]}}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Users.GetUserSummary(guid).Result;


                Assert.AreEqual("uaa-id-256", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("2016-02-09T10:21:51Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);

            }
        }

        [TestMethod]
        public void ListAllUsersTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 2,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""uaa-id-246"",
        ""url"": ""/v2/users/uaa-id-246"",
        ""created_at"": ""2016-02-09T10:21:51Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": ""f1d11238-ab69-413e-8940-3ca89791817e"",
        ""username"": ""user@example.com"",
        ""default_space_url"": ""/v2/spaces/f1d11238-ab69-413e-8940-3ca89791817e"",
        ""spaces_url"": ""/v2/users/uaa-id-246/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-246/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-246/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-246/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-246/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-246/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-246/audited_spaces""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""uaa-id-247"",
        ""url"": ""/v2/users/uaa-id-247"",
        ""created_at"": ""2016-02-09T10:21:51Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": true,
        ""active"": false,
        ""default_space_guid"": null,
        ""spaces_url"": ""/v2/users/uaa-id-247/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-247/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-247/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-247/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-247/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-247/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-247/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.Users.ListAllUsers().Result;

                Assert.AreEqual("2", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("uaa-id-246", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-246", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:51Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("f1d11238-ab69-413e-8940-3ca89791817e", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("user@example.com", TestUtil.ToTestableString(obj[0].Username), true);
                Assert.AreEqual("/v2/spaces/f1d11238-ab69-413e-8940-3ca89791817e", TestUtil.ToTestableString(obj[0].DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-246/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-246/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-246/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-246/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-246/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-246/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-246/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);
                Assert.AreEqual("uaa-id-247", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-247", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:51Z", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[1].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[1].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/users/uaa-id-247/spaces", TestUtil.ToTestableString(obj[1].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-247/organizations", TestUtil.ToTestableString(obj[1].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-247/managed_organizations", TestUtil.ToTestableString(obj[1].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-247/billing_managed_organizations", TestUtil.ToTestableString(obj[1].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-247/audited_organizations", TestUtil.ToTestableString(obj[1].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-247/managed_spaces", TestUtil.ToTestableString(obj[1].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-247/audited_spaces", TestUtil.ToTestableString(obj[1].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void RetrieveUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""uaa-id-244"",
    ""url"": ""/v2/users/uaa-id-244"",
    ""created_at"": ""2016-02-09T10:21:51Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""d926f36f-991e-41a5-9a1c-58e847026f41"",
    ""default_space_url"": ""/v2/spaces/d926f36f-991e-41a5-9a1c-58e847026f41"",
    ""spaces_url"": ""/v2/users/uaa-id-244/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-244/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-244/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-244/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-244/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-244/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-244/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Users.RetrieveUser(guid).Result;


                Assert.AreEqual("uaa-id-244", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-244", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:51Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("d926f36f-991e-41a5-9a1c-58e847026f41", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/d926f36f-991e-41a5-9a1c-58e847026f41", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-244/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-244/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-244/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-244/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-244/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-244/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-244/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void UpdateUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""uaa-id-248"",
    ""url"": ""/v2/users/uaa-id-248"",
    ""created_at"": ""2016-02-09T10:21:51Z"",
    ""updated_at"": ""2016-02-09T10:21:51Z""
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""48a0e0b8-6497-4fd0-bf05-823c82e642d1"",
    ""default_space_url"": ""/v2/spaces/48a0e0b8-6497-4fd0-bf05-823c82e642d1"",
    ""spaces_url"": ""/v2/users/uaa-id-248/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-248/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-248/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-248/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-248/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-248/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-248/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                UpdateUserRequest value = new UpdateUserRequest();


                var obj = cfClient.Users.UpdateUser(guid, value).Result;


                Assert.AreEqual("uaa-id-248", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-248", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:51Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-02-09T10:21:51Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("48a0e0b8-6497-4fd0-bf05-823c82e642d1", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/48a0e0b8-6497-4fd0-bf05-823c82e642d1", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-248/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-248/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-248/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-248/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-248/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-248/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-248/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void RemoveAuditedOrganizationFromUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""uaa-id-236"",
    ""url"": ""/v2/users/uaa-id-236"",
    ""created_at"": ""2016-02-09T10:21:51Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""3bcbd673-8528-4848-abd8-35acffbed5a9"",
    ""default_space_url"": ""/v2/spaces/3bcbd673-8528-4848-abd8-35acffbed5a9"",
    ""spaces_url"": ""/v2/users/uaa-id-236/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-236/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-236/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-236/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-236/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-236/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-236/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? audited_organization_guid = Guid.NewGuid();


                var obj = cfClient.Users.RemoveAuditedOrganizationFromUser(guid, audited_organization_guid).Result;


                Assert.AreEqual("uaa-id-236", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-236", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:51Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("3bcbd673-8528-4848-abd8-35acffbed5a9", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/3bcbd673-8528-4848-abd8-35acffbed5a9", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-236/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-236/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-236/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-236/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-236/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-236/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-236/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllAuditedOrganizationsForUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""e8949f29-5850-45b8-a9a6-ca9c017fb9ff"",
        ""url"": ""/v2/organizations/e8949f29-5850-45b8-a9a6-ca9c017fb9ff"",
        ""created_at"": ""2016-02-09T10:21:51Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1598"",
        ""billing_enabled"": false,
        ""quota_definition_guid"": ""b4507af6-ba82-429f-b8e5-717a78b149e4"",
        ""status"": ""active"",
        ""quota_definition_url"": ""/v2/quota_definitions/b4507af6-ba82-429f-b8e5-717a78b149e4"",
        ""spaces_url"": ""/v2/organizations/e8949f29-5850-45b8-a9a6-ca9c017fb9ff/spaces"",
        ""domains_url"": ""/v2/organizations/e8949f29-5850-45b8-a9a6-ca9c017fb9ff/domains"",
        ""private_domains_url"": ""/v2/organizations/e8949f29-5850-45b8-a9a6-ca9c017fb9ff/private_domains"",
        ""users_url"": ""/v2/organizations/e8949f29-5850-45b8-a9a6-ca9c017fb9ff/users"",
        ""managers_url"": ""/v2/organizations/e8949f29-5850-45b8-a9a6-ca9c017fb9ff/managers"",
        ""billing_managers_url"": ""/v2/organizations/e8949f29-5850-45b8-a9a6-ca9c017fb9ff/billing_managers"",
        ""auditors_url"": ""/v2/organizations/e8949f29-5850-45b8-a9a6-ca9c017fb9ff/auditors"",
        ""app_events_url"": ""/v2/organizations/e8949f29-5850-45b8-a9a6-ca9c017fb9ff/app_events"",
        ""space_quota_definitions_url"": ""/v2/organizations/e8949f29-5850-45b8-a9a6-ca9c017fb9ff/space_quota_definitions""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Users.ListAllAuditedOrganizationsForUser(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("e8949f29-5850-45b8-a9a6-ca9c017fb9ff", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/e8949f29-5850-45b8-a9a6-ca9c017fb9ff", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:51Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1598", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].BillingEnabled), true);
                Assert.AreEqual("b4507af6-ba82-429f-b8e5-717a78b149e4", TestUtil.ToTestableString(obj[0].QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj[0].Status), true);
                Assert.AreEqual("/v2/quota_definitions/b4507af6-ba82-429f-b8e5-717a78b149e4", TestUtil.ToTestableString(obj[0].QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/e8949f29-5850-45b8-a9a6-ca9c017fb9ff/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/e8949f29-5850-45b8-a9a6-ca9c017fb9ff/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/e8949f29-5850-45b8-a9a6-ca9c017fb9ff/private_domains", TestUtil.ToTestableString(obj[0].PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/e8949f29-5850-45b8-a9a6-ca9c017fb9ff/users", TestUtil.ToTestableString(obj[0].UsersUrl), true);
                Assert.AreEqual("/v2/organizations/e8949f29-5850-45b8-a9a6-ca9c017fb9ff/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/e8949f29-5850-45b8-a9a6-ca9c017fb9ff/billing_managers", TestUtil.ToTestableString(obj[0].BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/e8949f29-5850-45b8-a9a6-ca9c017fb9ff/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/e8949f29-5850-45b8-a9a6-ca9c017fb9ff/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/e8949f29-5850-45b8-a9a6-ca9c017fb9ff/space_quota_definitions", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void AssociateManagedSpaceWithUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""uaa-id-213"",
    ""url"": ""/v2/users/uaa-id-213"",
    ""created_at"": ""2016-02-09T10:21:50Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""b19de77b-1313-4b08-ada8-68faf121e296"",
    ""default_space_url"": ""/v2/spaces/b19de77b-1313-4b08-ada8-68faf121e296"",
    ""spaces_url"": ""/v2/users/uaa-id-213/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-213/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-213/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-213/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-213/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-213/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-213/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? managed_space_guid = Guid.NewGuid();


                var obj = cfClient.Users.AssociateManagedSpaceWithUser(guid, managed_space_guid).Result;


                Assert.AreEqual("uaa-id-213", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-213", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:50Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("b19de77b-1313-4b08-ada8-68faf121e296", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/b19de77b-1313-4b08-ada8-68faf121e296", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-213/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-213/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-213/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-213/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-213/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-213/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-213/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void RemoveAuditedSpaceFromUserTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""uaa-id-242"",
    ""url"": ""/v2/users/uaa-id-242"",
    ""created_at"": ""2016-02-09T10:21:51Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""admin"": false,
    ""active"": false,
    ""default_space_guid"": ""eff27ed5-14d9-43d7-a7bf-9bf1dbd4c1e8"",
    ""default_space_url"": ""/v2/spaces/eff27ed5-14d9-43d7-a7bf-9bf1dbd4c1e8"",
    ""spaces_url"": ""/v2/users/uaa-id-242/spaces"",
    ""organizations_url"": ""/v2/users/uaa-id-242/organizations"",
    ""managed_organizations_url"": ""/v2/users/uaa-id-242/managed_organizations"",
    ""billing_managed_organizations_url"": ""/v2/users/uaa-id-242/billing_managed_organizations"",
    ""audited_organizations_url"": ""/v2/users/uaa-id-242/audited_organizations"",
    ""managed_spaces_url"": ""/v2/users/uaa-id-242/managed_spaces"",
    ""audited_spaces_url"": ""/v2/users/uaa-id-242/audited_spaces""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? audited_space_guid = Guid.NewGuid();


                var obj = cfClient.Users.RemoveAuditedSpaceFromUser(guid, audited_space_guid).Result;


                Assert.AreEqual("uaa-id-242", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-242", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:51Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.Active), true);
                Assert.AreEqual("eff27ed5-14d9-43d7-a7bf-9bf1dbd4c1e8", TestUtil.ToTestableString(obj.DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/spaces/eff27ed5-14d9-43d7-a7bf-9bf1dbd4c1e8", TestUtil.ToTestableString(obj.DefaultSpaceUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-242/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-242/organizations", TestUtil.ToTestableString(obj.OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-242/managed_organizations", TestUtil.ToTestableString(obj.ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-242/billing_managed_organizations", TestUtil.ToTestableString(obj.BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-242/audited_organizations", TestUtil.ToTestableString(obj.AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-242/managed_spaces", TestUtil.ToTestableString(obj.ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-242/audited_spaces", TestUtil.ToTestableString(obj.AuditedSpacesUrl), true);

            }
        }

    }
}