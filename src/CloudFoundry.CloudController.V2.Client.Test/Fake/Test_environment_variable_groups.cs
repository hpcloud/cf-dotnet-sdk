//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class EnvironmentVariableGroupsEndpoint
{
        [TestMethod]
        public void UpdateContentsOfRunningEnvironmentVariableGroupTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""abc"": 123,
  ""do-re-me"": ""far-so-la-tee""
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                UpdateContentsOfRunningEnvironmentVariableGroupRequest value = new UpdateContentsOfRunningEnvironmentVariableGroupRequest();


                var obj = cfClient.EnvironmentVariableGroups.UpdateContentsOfRunningEnvironmentVariableGroup(value).Result;


                Assert.AreEqual("123", TestUtil.ToTestableString(obj.Abc), true);
                Assert.AreEqual("far-so-la-tee", TestUtil.ToTestableString(obj.Doreme), true);

            }
        }

        [TestMethod]
        public void GettingContentsOfStagingEnvironmentVariableGroupTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""abc"": 123,
  ""do-re-me"": ""far-so-la-tee""
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.EnvironmentVariableGroups.GettingContentsOfStagingEnvironmentVariableGroup().Result;


                Assert.AreEqual("123", TestUtil.ToTestableString(obj.Abc), true);
                Assert.AreEqual("far-so-la-tee", TestUtil.ToTestableString(obj.Doreme), true);

            }
        }

        [TestMethod]
        public void UpdateContentsOfStagingEnvironmentVariableGroupTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""abc"": 123,
  ""do-re-me"": ""far-so-la-tee""
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                UpdateContentsOfStagingEnvironmentVariableGroupRequest value = new UpdateContentsOfStagingEnvironmentVariableGroupRequest();


                var obj = cfClient.EnvironmentVariableGroups.UpdateContentsOfStagingEnvironmentVariableGroup(value).Result;


                Assert.AreEqual("123", TestUtil.ToTestableString(obj.Abc), true);
                Assert.AreEqual("far-so-la-tee", TestUtil.ToTestableString(obj.Doreme), true);

            }
        }

        [TestMethod]
        public void GettingContentsOfRunningEnvironmentVariableGroupTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""abc"": 123,
  ""do-re-me"": ""far-so-la-tee""
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.EnvironmentVariableGroups.GettingContentsOfRunningEnvironmentVariableGroup().Result;


                Assert.AreEqual("123", TestUtil.ToTestableString(obj.Abc), true);
                Assert.AreEqual("far-so-la-tee", TestUtil.ToTestableString(obj.Doreme), true);

            }
        }

    }
}