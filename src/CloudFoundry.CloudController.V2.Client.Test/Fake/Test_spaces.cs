//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class SpacesEndpoint
{
        [TestMethod]
        public void ListAllSecurityGroupsForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""f385f9c8-e390-44b9-9aad-51699fdbe48c"",
        ""url"": ""/v2/security_groups/f385f9c8-e390-44b9-9aad-51699fdbe48c"",
        ""created_at"": ""2016-02-09T10:21:44Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-243"",
        ""rules"": [
          {
            ""protocol"": ""udp"",
            ""ports"": ""8080"",
            ""destination"": ""198.41.191.47/1""
          }
        ],
        ""running_default"": false,
        ""staging_default"": false,
        ""spaces_url"": ""/v2/security_groups/f385f9c8-e390-44b9-9aad-51699fdbe48c/spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllSecurityGroupsForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("f385f9c8-e390-44b9-9aad-51699fdbe48c", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/security_groups/f385f9c8-e390-44b9-9aad-51699fdbe48c", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:44Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-243", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].RunningDefault), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].StagingDefault), true);
                Assert.AreEqual("/v2/security_groups/f385f9c8-e390-44b9-9aad-51699fdbe48c/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);

            }
        }

        [TestMethod]
        public void RemoveDeveloperFromSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""3963f41d-89f1-46d8-9341-fe7446113aa4"",
    ""url"": ""/v2/spaces/3963f41d-89f1-46d8-9341-fe7446113aa4"",
    ""created_at"": ""2016-02-09T10:21:44Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-229"",
    ""organization_guid"": ""4ee43d20-e1d7-4118-b47f-ead77cc37f90"",
    ""space_quota_definition_guid"": null,
    ""organization_url"": ""/v2/organizations/4ee43d20-e1d7-4118-b47f-ead77cc37f90"",
    ""developers_url"": ""/v2/spaces/3963f41d-89f1-46d8-9341-fe7446113aa4/developers"",
    ""managers_url"": ""/v2/spaces/3963f41d-89f1-46d8-9341-fe7446113aa4/managers"",
    ""auditors_url"": ""/v2/spaces/3963f41d-89f1-46d8-9341-fe7446113aa4/auditors"",
    ""apps_url"": ""/v2/spaces/3963f41d-89f1-46d8-9341-fe7446113aa4/apps"",
    ""routes_url"": ""/v2/spaces/3963f41d-89f1-46d8-9341-fe7446113aa4/routes"",
    ""domains_url"": ""/v2/spaces/3963f41d-89f1-46d8-9341-fe7446113aa4/domains"",
    ""service_instances_url"": ""/v2/spaces/3963f41d-89f1-46d8-9341-fe7446113aa4/service_instances"",
    ""app_events_url"": ""/v2/spaces/3963f41d-89f1-46d8-9341-fe7446113aa4/app_events"",
    ""events_url"": ""/v2/spaces/3963f41d-89f1-46d8-9341-fe7446113aa4/events"",
    ""security_groups_url"": ""/v2/spaces/3963f41d-89f1-46d8-9341-fe7446113aa4/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? developer_guid = Guid.NewGuid();


                var obj = cfClient.Spaces.RemoveDeveloperFromSpace(guid, developer_guid).Result;


                Assert.AreEqual("3963f41d-89f1-46d8-9341-fe7446113aa4", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/3963f41d-89f1-46d8-9341-fe7446113aa4", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:44Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-229", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("4ee43d20-e1d7-4118-b47f-ead77cc37f90", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/4ee43d20-e1d7-4118-b47f-ead77cc37f90", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/3963f41d-89f1-46d8-9341-fe7446113aa4/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/3963f41d-89f1-46d8-9341-fe7446113aa4/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/3963f41d-89f1-46d8-9341-fe7446113aa4/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/3963f41d-89f1-46d8-9341-fe7446113aa4/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/3963f41d-89f1-46d8-9341-fe7446113aa4/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/3963f41d-89f1-46d8-9341-fe7446113aa4/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/3963f41d-89f1-46d8-9341-fe7446113aa4/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/3963f41d-89f1-46d8-9341-fe7446113aa4/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/3963f41d-89f1-46d8-9341-fe7446113aa4/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/3963f41d-89f1-46d8-9341-fe7446113aa4/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllRoutesForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""ad3e49a0-d92d-4abd-96ab-ce88a84d3531"",
        ""url"": ""/v2/routes/ad3e49a0-d92d-4abd-96ab-ce88a84d3531"",
        ""created_at"": ""2016-02-09T10:21:44Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""host"": ""host-2"",
        ""domain_guid"": ""b021bdf0-74ce-481f-ab7f-c92a30a20fbf"",
        ""space_guid"": ""20758c0c-22c1-440a-9b29-18eb974c7d02"",
        ""domain_url"": ""/v2/domains/b021bdf0-74ce-481f-ab7f-c92a30a20fbf"",
        ""space_url"": ""/v2/spaces/20758c0c-22c1-440a-9b29-18eb974c7d02"",
        ""apps_url"": ""/v2/routes/ad3e49a0-d92d-4abd-96ab-ce88a84d3531/apps""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllRoutesForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("ad3e49a0-d92d-4abd-96ab-ce88a84d3531", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/routes/ad3e49a0-d92d-4abd-96ab-ce88a84d3531", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:44Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("host-2", TestUtil.ToTestableString(obj[0].Host), true);
                Assert.AreEqual("b021bdf0-74ce-481f-ab7f-c92a30a20fbf", TestUtil.ToTestableString(obj[0].DomainGuid), true);
                Assert.AreEqual("20758c0c-22c1-440a-9b29-18eb974c7d02", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("/v2/domains/b021bdf0-74ce-481f-ab7f-c92a30a20fbf", TestUtil.ToTestableString(obj[0].DomainUrl), true);
                Assert.AreEqual("/v2/spaces/20758c0c-22c1-440a-9b29-18eb974c7d02", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/routes/ad3e49a0-d92d-4abd-96ab-ce88a84d3531/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServiceInstancesForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""b0537265-2b9d-4e9b-aaf4-eba229d7bead"",
        ""url"": ""/v2/service_instances/b0537265-2b9d-4e9b-aaf4-eba229d7bead"",
        ""created_at"": ""2016-02-09T10:21:43Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-205"",
        ""credentials"": {
          ""creds-key-122"": ""creds-val-122""
        },
        ""service_plan_guid"": ""5abcea02-a0c9-4ddf-978b-5c84e827a78c"",
        ""space_guid"": ""fb5270a8-987f-47a7-aa4f-c7e6502fdbc7"",
        ""gateway_data"": null,
        ""dashboard_url"": null,
        ""type"": ""managed_service_instance"",
        ""last_operation"": null,
        ""space_url"": ""/v2/spaces/fb5270a8-987f-47a7-aa4f-c7e6502fdbc7"",
        ""service_plan_url"": ""/v2/service_plans/5abcea02-a0c9-4ddf-978b-5c84e827a78c"",
        ""service_bindings_url"": ""/v2/service_instances/b0537265-2b9d-4e9b-aaf4-eba229d7bead/service_bindings""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllServiceInstancesForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("b0537265-2b9d-4e9b-aaf4-eba229d7bead", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/service_instances/b0537265-2b9d-4e9b-aaf4-eba229d7bead", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:43Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-205", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("5abcea02-a0c9-4ddf-978b-5c84e827a78c", TestUtil.ToTestableString(obj[0].ServicePlanGuid), true);
                Assert.AreEqual("fb5270a8-987f-47a7-aa4f-c7e6502fdbc7", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].GatewayData), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DashboardUrl), true);
                Assert.AreEqual("managed_service_instance", TestUtil.ToTestableString(obj[0].Type), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].LastOperation), true);
                Assert.AreEqual("/v2/spaces/fb5270a8-987f-47a7-aa4f-c7e6502fdbc7", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/service_plans/5abcea02-a0c9-4ddf-978b-5c84e827a78c", TestUtil.ToTestableString(obj[0].ServicePlanUrl), true);
                Assert.AreEqual("/v2/service_instances/b0537265-2b9d-4e9b-aaf4-eba229d7bead/service_bindings", TestUtil.ToTestableString(obj[0].ServiceBindingsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllAuditorsForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""uaa-id-59"",
        ""url"": ""/v2/users/uaa-id-59"",
        ""created_at"": ""2016-02-09T10:21:43Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""username"": ""auditor@example.com"",
        ""spaces_url"": ""/v2/users/uaa-id-59/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-59/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-59/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-59/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-59/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-59/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-59/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllAuditorsForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("uaa-id-59", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-59", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:43Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("auditor@example.com", TestUtil.ToTestableString(obj[0].Username), true);
                Assert.AreEqual("/v2/users/uaa-id-59/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-59/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-59/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-59/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-59/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-59/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-59/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void CreateSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""3bfa61a2-7348-43a9-8d29-9d37c8a00402"",
    ""url"": ""/v2/spaces/3bfa61a2-7348-43a9-8d29-9d37c8a00402"",
    ""created_at"": ""2016-02-09T10:21:44Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""development"",
    ""organization_guid"": ""9e56d5e5-95bf-40a0-bf7c-8ebc278f2bf4"",
    ""space_quota_definition_guid"": null,
    ""organization_url"": ""/v2/organizations/9e56d5e5-95bf-40a0-bf7c-8ebc278f2bf4"",
    ""developers_url"": ""/v2/spaces/3bfa61a2-7348-43a9-8d29-9d37c8a00402/developers"",
    ""managers_url"": ""/v2/spaces/3bfa61a2-7348-43a9-8d29-9d37c8a00402/managers"",
    ""auditors_url"": ""/v2/spaces/3bfa61a2-7348-43a9-8d29-9d37c8a00402/auditors"",
    ""apps_url"": ""/v2/spaces/3bfa61a2-7348-43a9-8d29-9d37c8a00402/apps"",
    ""routes_url"": ""/v2/spaces/3bfa61a2-7348-43a9-8d29-9d37c8a00402/routes"",
    ""domains_url"": ""/v2/spaces/3bfa61a2-7348-43a9-8d29-9d37c8a00402/domains"",
    ""service_instances_url"": ""/v2/spaces/3bfa61a2-7348-43a9-8d29-9d37c8a00402/service_instances"",
    ""app_events_url"": ""/v2/spaces/3bfa61a2-7348-43a9-8d29-9d37c8a00402/app_events"",
    ""events_url"": ""/v2/spaces/3bfa61a2-7348-43a9-8d29-9d37c8a00402/events"",
    ""security_groups_url"": ""/v2/spaces/3bfa61a2-7348-43a9-8d29-9d37c8a00402/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateSpaceRequest value = new CreateSpaceRequest();


                var obj = cfClient.Spaces.CreateSpace(value).Result;


                Assert.AreEqual("3bfa61a2-7348-43a9-8d29-9d37c8a00402", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/3bfa61a2-7348-43a9-8d29-9d37c8a00402", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:44Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("development", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("9e56d5e5-95bf-40a0-bf7c-8ebc278f2bf4", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/9e56d5e5-95bf-40a0-bf7c-8ebc278f2bf4", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/3bfa61a2-7348-43a9-8d29-9d37c8a00402/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/3bfa61a2-7348-43a9-8d29-9d37c8a00402/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/3bfa61a2-7348-43a9-8d29-9d37c8a00402/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/3bfa61a2-7348-43a9-8d29-9d37c8a00402/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/3bfa61a2-7348-43a9-8d29-9d37c8a00402/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/3bfa61a2-7348-43a9-8d29-9d37c8a00402/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/3bfa61a2-7348-43a9-8d29-9d37c8a00402/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/3bfa61a2-7348-43a9-8d29-9d37c8a00402/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/3bfa61a2-7348-43a9-8d29-9d37c8a00402/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/3bfa61a2-7348-43a9-8d29-9d37c8a00402/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void UpdateSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""d1fd3424-ea03-4f11-ac21-3e5d13b18274"",
    ""url"": ""/v2/spaces/d1fd3424-ea03-4f11-ac21-3e5d13b18274"",
    ""created_at"": ""2016-02-09T10:21:44Z"",
    ""updated_at"": ""2016-02-09T10:21:44Z""
  },
  ""entity"": {
    ""name"": ""New Space Name"",
    ""organization_guid"": ""5e097211-0f25-45ce-b9e6-adaf382dc51d"",
    ""space_quota_definition_guid"": null,
    ""organization_url"": ""/v2/organizations/5e097211-0f25-45ce-b9e6-adaf382dc51d"",
    ""developers_url"": ""/v2/spaces/d1fd3424-ea03-4f11-ac21-3e5d13b18274/developers"",
    ""managers_url"": ""/v2/spaces/d1fd3424-ea03-4f11-ac21-3e5d13b18274/managers"",
    ""auditors_url"": ""/v2/spaces/d1fd3424-ea03-4f11-ac21-3e5d13b18274/auditors"",
    ""apps_url"": ""/v2/spaces/d1fd3424-ea03-4f11-ac21-3e5d13b18274/apps"",
    ""routes_url"": ""/v2/spaces/d1fd3424-ea03-4f11-ac21-3e5d13b18274/routes"",
    ""domains_url"": ""/v2/spaces/d1fd3424-ea03-4f11-ac21-3e5d13b18274/domains"",
    ""service_instances_url"": ""/v2/spaces/d1fd3424-ea03-4f11-ac21-3e5d13b18274/service_instances"",
    ""app_events_url"": ""/v2/spaces/d1fd3424-ea03-4f11-ac21-3e5d13b18274/app_events"",
    ""events_url"": ""/v2/spaces/d1fd3424-ea03-4f11-ac21-3e5d13b18274/events"",
    ""security_groups_url"": ""/v2/spaces/d1fd3424-ea03-4f11-ac21-3e5d13b18274/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                UpdateSpaceRequest value = new UpdateSpaceRequest();


                var obj = cfClient.Spaces.UpdateSpace(guid, value).Result;


                Assert.AreEqual("d1fd3424-ea03-4f11-ac21-3e5d13b18274", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/d1fd3424-ea03-4f11-ac21-3e5d13b18274", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:44Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-02-09T10:21:44Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("New Space Name", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("5e097211-0f25-45ce-b9e6-adaf382dc51d", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/5e097211-0f25-45ce-b9e6-adaf382dc51d", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/d1fd3424-ea03-4f11-ac21-3e5d13b18274/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/d1fd3424-ea03-4f11-ac21-3e5d13b18274/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/d1fd3424-ea03-4f11-ac21-3e5d13b18274/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/d1fd3424-ea03-4f11-ac21-3e5d13b18274/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/d1fd3424-ea03-4f11-ac21-3e5d13b18274/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/d1fd3424-ea03-4f11-ac21-3e5d13b18274/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/d1fd3424-ea03-4f11-ac21-3e5d13b18274/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/d1fd3424-ea03-4f11-ac21-3e5d13b18274/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/d1fd3424-ea03-4f11-ac21-3e5d13b18274/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/d1fd3424-ea03-4f11-ac21-3e5d13b18274/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllDomainsForSpaceDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 2,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""7662b036-6569-492f-9d5e-4b1745bca39d"",
        ""url"": ""/v2/domains/7662b036-6569-492f-9d5e-4b1745bca39d"",
        ""created_at"": ""2016-02-09T10:21:41Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""customer-app-domain1.com""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""ea934439-c0e1-42de-bc89-a572b9301549"",
        ""url"": ""/v2/domains/ea934439-c0e1-42de-bc89-a572b9301549"",
        ""created_at"": ""2016-02-09T10:21:41Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""customer-app-domain2.com""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllDomainsForSpaceDeprecated(guid).Result;

                Assert.AreEqual("2", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("7662b036-6569-492f-9d5e-4b1745bca39d", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/domains/7662b036-6569-492f-9d5e-4b1745bca39d", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:41Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("customer-app-domain1.com", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("ea934439-c0e1-42de-bc89-a572b9301549", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/domains/ea934439-c0e1-42de-bc89-a572b9301549", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:41Z", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("customer-app-domain2.com", TestUtil.ToTestableString(obj[1].Name), true);

            }
        }

        [TestMethod]
        public void ListAllEventsForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""2e148a5f-9aa1-407e-a549-a904b0bf7905"",
        ""url"": ""/v2/events/2e148a5f-9aa1-407e-a549-a904b0bf7905"",
        ""created_at"": ""2016-02-09T10:21:44Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""type"": ""audit.space.update"",
        ""actor"": ""uaa-id-69"",
        ""actor_type"": ""user"",
        ""actor_name"": ""user@example.com"",
        ""actee"": ""1dc65be3-ef72-403c-96cf-23c1d151429b"",
        ""actee_type"": ""space"",
        ""actee_name"": ""name-220"",
        ""timestamp"": ""2016-02-09T10:21:44Z"",
        ""metadata"": {
          ""request"": {
            ""name"": ""new_name""
          }
        },
        ""space_guid"": ""1dc65be3-ef72-403c-96cf-23c1d151429b"",
        ""organization_guid"": ""4d506281-1226-48e7-b879-f9b4f2de2c15""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllEventsForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("2e148a5f-9aa1-407e-a549-a904b0bf7905", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/events/2e148a5f-9aa1-407e-a549-a904b0bf7905", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:44Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("audit.space.update", TestUtil.ToTestableString(obj[0].Type), true);
                Assert.AreEqual("uaa-id-69", TestUtil.ToTestableString(obj[0].Actor), true);
                Assert.AreEqual("user", TestUtil.ToTestableString(obj[0].ActorType), true);
                Assert.AreEqual("user@example.com", TestUtil.ToTestableString(obj[0].ActorName), true);
                Assert.AreEqual("1dc65be3-ef72-403c-96cf-23c1d151429b", TestUtil.ToTestableString(obj[0].Actee), true);
                Assert.AreEqual("space", TestUtil.ToTestableString(obj[0].ActeeType), true);
                Assert.AreEqual("name-220", TestUtil.ToTestableString(obj[0].ActeeName), true);
                Assert.AreEqual("2016-02-09T10:21:44Z", TestUtil.ToTestableString(obj[0].Timestamp), true);
                Assert.AreEqual("1dc65be3-ef72-403c-96cf-23c1d151429b", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("4d506281-1226-48e7-b879-f9b4f2de2c15", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);

            }
        }

        [TestMethod]
        public void RetrieveSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""dc62459f-d623-4f11-a476-78447c4e5e8a"",
    ""url"": ""/v2/spaces/dc62459f-d623-4f11-a476-78447c4e5e8a"",
    ""created_at"": ""2016-02-09T10:21:44Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-262"",
    ""organization_guid"": ""73c581a0-b022-4b2d-936c-bcaab5a3f416"",
    ""space_quota_definition_guid"": null,
    ""organization_url"": ""/v2/organizations/73c581a0-b022-4b2d-936c-bcaab5a3f416"",
    ""developers_url"": ""/v2/spaces/dc62459f-d623-4f11-a476-78447c4e5e8a/developers"",
    ""managers_url"": ""/v2/spaces/dc62459f-d623-4f11-a476-78447c4e5e8a/managers"",
    ""auditors_url"": ""/v2/spaces/dc62459f-d623-4f11-a476-78447c4e5e8a/auditors"",
    ""apps_url"": ""/v2/spaces/dc62459f-d623-4f11-a476-78447c4e5e8a/apps"",
    ""routes_url"": ""/v2/spaces/dc62459f-d623-4f11-a476-78447c4e5e8a/routes"",
    ""domains_url"": ""/v2/spaces/dc62459f-d623-4f11-a476-78447c4e5e8a/domains"",
    ""service_instances_url"": ""/v2/spaces/dc62459f-d623-4f11-a476-78447c4e5e8a/service_instances"",
    ""app_events_url"": ""/v2/spaces/dc62459f-d623-4f11-a476-78447c4e5e8a/app_events"",
    ""events_url"": ""/v2/spaces/dc62459f-d623-4f11-a476-78447c4e5e8a/events"",
    ""security_groups_url"": ""/v2/spaces/dc62459f-d623-4f11-a476-78447c4e5e8a/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.RetrieveSpace(guid).Result;


                Assert.AreEqual("dc62459f-d623-4f11-a476-78447c4e5e8a", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/dc62459f-d623-4f11-a476-78447c4e5e8a", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:44Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-262", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("73c581a0-b022-4b2d-936c-bcaab5a3f416", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/73c581a0-b022-4b2d-936c-bcaab5a3f416", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/dc62459f-d623-4f11-a476-78447c4e5e8a/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/dc62459f-d623-4f11-a476-78447c4e5e8a/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/dc62459f-d623-4f11-a476-78447c4e5e8a/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/dc62459f-d623-4f11-a476-78447c4e5e8a/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/dc62459f-d623-4f11-a476-78447c4e5e8a/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/dc62459f-d623-4f11-a476-78447c4e5e8a/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/dc62459f-d623-4f11-a476-78447c4e5e8a/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/dc62459f-d623-4f11-a476-78447c4e5e8a/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/dc62459f-d623-4f11-a476-78447c4e5e8a/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/dc62459f-d623-4f11-a476-78447c4e5e8a/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveSecurityGroupFromSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""b5e619ec-feed-4363-81b8-dd14449b89f5"",
    ""url"": ""/v2/spaces/b5e619ec-feed-4363-81b8-dd14449b89f5"",
    ""created_at"": ""2016-02-09T10:21:44Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-249"",
    ""organization_guid"": ""90ea48a2-c0e1-4778-9c07-6e43c9c283ef"",
    ""space_quota_definition_guid"": null,
    ""organization_url"": ""/v2/organizations/90ea48a2-c0e1-4778-9c07-6e43c9c283ef"",
    ""developers_url"": ""/v2/spaces/b5e619ec-feed-4363-81b8-dd14449b89f5/developers"",
    ""managers_url"": ""/v2/spaces/b5e619ec-feed-4363-81b8-dd14449b89f5/managers"",
    ""auditors_url"": ""/v2/spaces/b5e619ec-feed-4363-81b8-dd14449b89f5/auditors"",
    ""apps_url"": ""/v2/spaces/b5e619ec-feed-4363-81b8-dd14449b89f5/apps"",
    ""routes_url"": ""/v2/spaces/b5e619ec-feed-4363-81b8-dd14449b89f5/routes"",
    ""domains_url"": ""/v2/spaces/b5e619ec-feed-4363-81b8-dd14449b89f5/domains"",
    ""service_instances_url"": ""/v2/spaces/b5e619ec-feed-4363-81b8-dd14449b89f5/service_instances"",
    ""app_events_url"": ""/v2/spaces/b5e619ec-feed-4363-81b8-dd14449b89f5/app_events"",
    ""events_url"": ""/v2/spaces/b5e619ec-feed-4363-81b8-dd14449b89f5/events"",
    ""security_groups_url"": ""/v2/spaces/b5e619ec-feed-4363-81b8-dd14449b89f5/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? security_group_guid = Guid.NewGuid();


                var obj = cfClient.Spaces.RemoveSecurityGroupFromSpace(guid, security_group_guid).Result;


                Assert.AreEqual("b5e619ec-feed-4363-81b8-dd14449b89f5", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/b5e619ec-feed-4363-81b8-dd14449b89f5", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:44Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-249", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("90ea48a2-c0e1-4778-9c07-6e43c9c283ef", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/90ea48a2-c0e1-4778-9c07-6e43c9c283ef", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/b5e619ec-feed-4363-81b8-dd14449b89f5/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/b5e619ec-feed-4363-81b8-dd14449b89f5/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/b5e619ec-feed-4363-81b8-dd14449b89f5/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/b5e619ec-feed-4363-81b8-dd14449b89f5/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/b5e619ec-feed-4363-81b8-dd14449b89f5/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/b5e619ec-feed-4363-81b8-dd14449b89f5/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/b5e619ec-feed-4363-81b8-dd14449b89f5/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/b5e619ec-feed-4363-81b8-dd14449b89f5/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/b5e619ec-feed-4363-81b8-dd14449b89f5/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/b5e619ec-feed-4363-81b8-dd14449b89f5/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveManagerFromSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""7b0f2213-cc72-4990-a3c9-3f355a8e741d"",
    ""url"": ""/v2/spaces/7b0f2213-cc72-4990-a3c9-3f355a8e741d"",
    ""created_at"": ""2016-02-09T10:21:44Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-259"",
    ""organization_guid"": ""358e6019-9ab3-4ad8-b38e-89ef4b1d025f"",
    ""space_quota_definition_guid"": null,
    ""organization_url"": ""/v2/organizations/358e6019-9ab3-4ad8-b38e-89ef4b1d025f"",
    ""developers_url"": ""/v2/spaces/7b0f2213-cc72-4990-a3c9-3f355a8e741d/developers"",
    ""managers_url"": ""/v2/spaces/7b0f2213-cc72-4990-a3c9-3f355a8e741d/managers"",
    ""auditors_url"": ""/v2/spaces/7b0f2213-cc72-4990-a3c9-3f355a8e741d/auditors"",
    ""apps_url"": ""/v2/spaces/7b0f2213-cc72-4990-a3c9-3f355a8e741d/apps"",
    ""routes_url"": ""/v2/spaces/7b0f2213-cc72-4990-a3c9-3f355a8e741d/routes"",
    ""domains_url"": ""/v2/spaces/7b0f2213-cc72-4990-a3c9-3f355a8e741d/domains"",
    ""service_instances_url"": ""/v2/spaces/7b0f2213-cc72-4990-a3c9-3f355a8e741d/service_instances"",
    ""app_events_url"": ""/v2/spaces/7b0f2213-cc72-4990-a3c9-3f355a8e741d/app_events"",
    ""events_url"": ""/v2/spaces/7b0f2213-cc72-4990-a3c9-3f355a8e741d/events"",
    ""security_groups_url"": ""/v2/spaces/7b0f2213-cc72-4990-a3c9-3f355a8e741d/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? manager_guid = Guid.NewGuid();


                var obj = cfClient.Spaces.RemoveManagerFromSpace(guid, manager_guid).Result;


                Assert.AreEqual("7b0f2213-cc72-4990-a3c9-3f355a8e741d", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/7b0f2213-cc72-4990-a3c9-3f355a8e741d", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:44Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-259", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("358e6019-9ab3-4ad8-b38e-89ef4b1d025f", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/358e6019-9ab3-4ad8-b38e-89ef4b1d025f", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/7b0f2213-cc72-4990-a3c9-3f355a8e741d/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/7b0f2213-cc72-4990-a3c9-3f355a8e741d/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/7b0f2213-cc72-4990-a3c9-3f355a8e741d/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/7b0f2213-cc72-4990-a3c9-3f355a8e741d/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/7b0f2213-cc72-4990-a3c9-3f355a8e741d/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/7b0f2213-cc72-4990-a3c9-3f355a8e741d/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/7b0f2213-cc72-4990-a3c9-3f355a8e741d/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/7b0f2213-cc72-4990-a3c9-3f355a8e741d/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/7b0f2213-cc72-4990-a3c9-3f355a8e741d/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/7b0f2213-cc72-4990-a3c9-3f355a8e741d/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllSpacesTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""a897d96b-29ee-4743-9c93-08ed1c54a2b1"",
        ""url"": ""/v2/spaces/a897d96b-29ee-4743-9c93-08ed1c54a2b1"",
        ""created_at"": ""2016-02-09T10:21:44Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-265"",
        ""organization_guid"": ""ba4cb1c8-9927-48a8-abac-b18772dcf48c"",
        ""space_quota_definition_guid"": null,
        ""organization_url"": ""/v2/organizations/ba4cb1c8-9927-48a8-abac-b18772dcf48c"",
        ""developers_url"": ""/v2/spaces/a897d96b-29ee-4743-9c93-08ed1c54a2b1/developers"",
        ""managers_url"": ""/v2/spaces/a897d96b-29ee-4743-9c93-08ed1c54a2b1/managers"",
        ""auditors_url"": ""/v2/spaces/a897d96b-29ee-4743-9c93-08ed1c54a2b1/auditors"",
        ""apps_url"": ""/v2/spaces/a897d96b-29ee-4743-9c93-08ed1c54a2b1/apps"",
        ""routes_url"": ""/v2/spaces/a897d96b-29ee-4743-9c93-08ed1c54a2b1/routes"",
        ""domains_url"": ""/v2/spaces/a897d96b-29ee-4743-9c93-08ed1c54a2b1/domains"",
        ""service_instances_url"": ""/v2/spaces/a897d96b-29ee-4743-9c93-08ed1c54a2b1/service_instances"",
        ""app_events_url"": ""/v2/spaces/a897d96b-29ee-4743-9c93-08ed1c54a2b1/app_events"",
        ""events_url"": ""/v2/spaces/a897d96b-29ee-4743-9c93-08ed1c54a2b1/events"",
        ""security_groups_url"": ""/v2/spaces/a897d96b-29ee-4743-9c93-08ed1c54a2b1/security_groups""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.Spaces.ListAllSpaces().Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("a897d96b-29ee-4743-9c93-08ed1c54a2b1", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/a897d96b-29ee-4743-9c93-08ed1c54a2b1", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:44Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-265", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("ba4cb1c8-9927-48a8-abac-b18772dcf48c", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/ba4cb1c8-9927-48a8-abac-b18772dcf48c", TestUtil.ToTestableString(obj[0].OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/a897d96b-29ee-4743-9c93-08ed1c54a2b1/developers", TestUtil.ToTestableString(obj[0].DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/a897d96b-29ee-4743-9c93-08ed1c54a2b1/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/a897d96b-29ee-4743-9c93-08ed1c54a2b1/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/a897d96b-29ee-4743-9c93-08ed1c54a2b1/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);
                Assert.AreEqual("/v2/spaces/a897d96b-29ee-4743-9c93-08ed1c54a2b1/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/a897d96b-29ee-4743-9c93-08ed1c54a2b1/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/a897d96b-29ee-4743-9c93-08ed1c54a2b1/service_instances", TestUtil.ToTestableString(obj[0].ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/a897d96b-29ee-4743-9c93-08ed1c54a2b1/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/a897d96b-29ee-4743-9c93-08ed1c54a2b1/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/spaces/a897d96b-29ee-4743-9c93-08ed1c54a2b1/security_groups", TestUtil.ToTestableString(obj[0].SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllManagersForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""uaa-id-85"",
        ""url"": ""/v2/users/uaa-id-85"",
        ""created_at"": ""2016-02-09T10:21:44Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""username"": ""manager@example.com"",
        ""spaces_url"": ""/v2/users/uaa-id-85/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-85/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-85/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-85/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-85/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-85/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-85/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllManagersForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("uaa-id-85", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-85", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:44Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("manager@example.com", TestUtil.ToTestableString(obj[0].Username), true);
                Assert.AreEqual("/v2/users/uaa-id-85/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-85/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-85/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-85/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-85/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-85/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-85/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void DeleteSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.Spaces.DeleteSpace(guid).Wait();

            }
        }

        [TestMethod]
        public void ListAllAppsForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""4aed5eb4-3768-499a-ab47-8841785a7168"",
        ""url"": ""/v2/apps/4aed5eb4-3768-499a-ab47-8841785a7168"",
        ""created_at"": ""2016-02-09T10:21:44Z"",
        ""updated_at"": ""2016-02-09T10:21:44Z""
      },
      ""entity"": {
        ""name"": ""name-235"",
        ""production"": false,
        ""space_guid"": ""e85b6691-3f5d-4f40-8384-84d902f979bc"",
        ""stack_guid"": ""d4733be0-974a-498d-9da5-819630f93f73"",
        ""buildpack"": null,
        ""detected_buildpack"": null,
        ""environment_json"": null,
        ""memory"": 1024,
        ""instances"": 1,
        ""disk_quota"": 1024,
        ""state"": ""STOPPED"",
        ""version"": ""29459a65-9159-4cc0-bcb8-2209adc9b3f6"",
        ""command"": null,
        ""console"": false,
        ""debug"": null,
        ""staging_task_id"": null,
        ""package_state"": ""PENDING"",
        ""health_check_type"": ""port"",
        ""health_check_timeout"": null,
        ""staging_failed_reason"": null,
        ""diego"": false,
        ""docker_image"": null,
        ""package_updated_at"": ""2016-02-09T10:21:44Z"",
        ""detected_start_command"": """",
        ""space_url"": ""/v2/spaces/e85b6691-3f5d-4f40-8384-84d902f979bc"",
        ""stack_url"": ""/v2/stacks/d4733be0-974a-498d-9da5-819630f93f73"",
        ""events_url"": ""/v2/apps/4aed5eb4-3768-499a-ab47-8841785a7168/events"",
        ""service_bindings_url"": ""/v2/apps/4aed5eb4-3768-499a-ab47-8841785a7168/service_bindings"",
        ""routes_url"": ""/v2/apps/4aed5eb4-3768-499a-ab47-8841785a7168/routes""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllAppsForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("4aed5eb4-3768-499a-ab47-8841785a7168", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/apps/4aed5eb4-3768-499a-ab47-8841785a7168", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:44Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-02-09T10:21:44Z", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-235", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Production), true);
                Assert.AreEqual("e85b6691-3f5d-4f40-8384-84d902f979bc", TestUtil.ToTestableString(obj[0].SpaceGuid), true);
                Assert.AreEqual("d4733be0-974a-498d-9da5-819630f93f73", TestUtil.ToTestableString(obj[0].StackGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Buildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DetectedBuildpack), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EnvironmentJson), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[0].Memory), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj[0].Instances), true);
                Assert.AreEqual("1024", TestUtil.ToTestableString(obj[0].DiskQuota), true);
                Assert.AreEqual("STOPPED", TestUtil.ToTestableString(obj[0].State), true);
                Assert.AreEqual("29459a65-9159-4cc0-bcb8-2209adc9b3f6", TestUtil.ToTestableString(obj[0].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Command), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Console), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Debug), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].StagingTaskId), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj[0].PackageState), true);
                Assert.AreEqual("port", TestUtil.ToTestableString(obj[0].HealthCheckType), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].HealthCheckTimeout), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].StagingFailedReason), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Diego), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DockerImage), true);
                Assert.AreEqual("2016-02-09T10:21:44Z", TestUtil.ToTestableString(obj[0].PackageUpdatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DetectedStartCommand), true);
                Assert.AreEqual("/v2/spaces/e85b6691-3f5d-4f40-8384-84d902f979bc", TestUtil.ToTestableString(obj[0].SpaceUrl), true);
                Assert.AreEqual("/v2/stacks/d4733be0-974a-498d-9da5-819630f93f73", TestUtil.ToTestableString(obj[0].StackUrl), true);
                Assert.AreEqual("/v2/apps/4aed5eb4-3768-499a-ab47-8841785a7168/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/apps/4aed5eb4-3768-499a-ab47-8841785a7168/service_bindings", TestUtil.ToTestableString(obj[0].ServiceBindingsUrl), true);
                Assert.AreEqual("/v2/apps/4aed5eb4-3768-499a-ab47-8841785a7168/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllDevelopersForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""uaa-id-71"",
        ""url"": ""/v2/users/uaa-id-71"",
        ""created_at"": ""2016-02-09T10:21:44Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""username"": ""developer@example.com"",
        ""spaces_url"": ""/v2/users/uaa-id-71/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-71/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-71/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-71/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-71/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-71/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-71/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllDevelopersForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("uaa-id-71", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-71", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:44Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("developer@example.com", TestUtil.ToTestableString(obj[0].Username), true);
                Assert.AreEqual("/v2/users/uaa-id-71/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-71/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-71/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-71/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-71/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-71/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-71/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void GetSpaceSummaryTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""guid"": ""560b475b-61d8-4580-bc1a-7e2484e52bd2"",
  ""name"": ""name-2110"",
  ""apps"": [
    {
      ""guid"": ""ad09a8e9-3382-4a00-acea-6973e9a09c2a"",
      ""urls"": [
        ""host-21.domain-65.example.com""
      ],
      ""routes"": [
        {
          ""guid"": ""be0ad334-dd21-42d1-af40-10ed44036522"",
          ""host"": ""host-21"",
          ""domain"": {
            ""guid"": ""d85a6ccf-24b6-40bd-90ff-5c9b00f5fe27"",
            ""name"": ""domain-65.example.com""
          }
        }
      ],
      ""service_count"": 1,
      ""service_names"": [
        ""name-2115""
      ],
      ""running_instances"": 0,
      ""name"": ""name-2113"",
      ""production"": false,
      ""space_guid"": ""560b475b-61d8-4580-bc1a-7e2484e52bd2"",
      ""stack_guid"": ""aef26506-4644-4046-a6a8-41a19bd4f64b"",
      ""buildpack"": null,
      ""detected_buildpack"": null,
      ""environment_json"": null,
      ""memory"": 1024,
      ""instances"": 1,
      ""disk_quota"": 1024,
      ""state"": ""STOPPED"",
      ""version"": ""8a5d2eae-0a74-4a6c-88da-c1c2ef37c325"",
      ""command"": null,
      ""console"": false,
      ""debug"": null,
      ""staging_task_id"": null,
      ""package_state"": ""PENDING"",
      ""health_check_type"": ""port"",
      ""health_check_timeout"": null,
      ""staging_failed_reason"": null,
      ""diego"": false,
      ""docker_image"": null,
      ""package_updated_at"": ""2016-02-09T10:21:57Z"",
      ""detected_start_command"": """"
    }
  ],
  ""services"": [
    {
      ""guid"": ""60d82ae9-b705-4f1d-80ab-7a4f0f7fa6d8"",
      ""name"": ""name-2115"",
      ""bound_app_count"": 1,
      ""last_operation"": null,
      ""dashboard_url"": null,
      ""service_plan"": {
        ""guid"": ""616fad7a-6886-40a1-87d0-90a7993e01ab"",
        ""name"": ""name-2116"",
        ""service"": {
          ""guid"": ""ba4728c2-d070-42b3-9f66-9bc3445aed12"",
          ""label"": ""label-82"",
          ""provider"": null,
          ""version"": null
        }
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.GetSpaceSummary(guid).Result;


                Assert.AreEqual("560b475b-61d8-4580-bc1a-7e2484e52bd2", TestUtil.ToTestableString(obj.Guid), true);
                Assert.AreEqual("name-2110", TestUtil.ToTestableString(obj.Name), true);

            }
        }

        [TestMethod]
        public void AssociateDeveloperWithSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""90a92341-c29e-4989-978b-855939af2302"",
    ""url"": ""/v2/spaces/90a92341-c29e-4989-978b-855939af2302"",
    ""created_at"": ""2016-02-09T10:21:44Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-226"",
    ""organization_guid"": ""d0885638-372b-42be-8780-4743de3fc0f5"",
    ""space_quota_definition_guid"": null,
    ""organization_url"": ""/v2/organizations/d0885638-372b-42be-8780-4743de3fc0f5"",
    ""developers_url"": ""/v2/spaces/90a92341-c29e-4989-978b-855939af2302/developers"",
    ""managers_url"": ""/v2/spaces/90a92341-c29e-4989-978b-855939af2302/managers"",
    ""auditors_url"": ""/v2/spaces/90a92341-c29e-4989-978b-855939af2302/auditors"",
    ""apps_url"": ""/v2/spaces/90a92341-c29e-4989-978b-855939af2302/apps"",
    ""routes_url"": ""/v2/spaces/90a92341-c29e-4989-978b-855939af2302/routes"",
    ""domains_url"": ""/v2/spaces/90a92341-c29e-4989-978b-855939af2302/domains"",
    ""service_instances_url"": ""/v2/spaces/90a92341-c29e-4989-978b-855939af2302/service_instances"",
    ""app_events_url"": ""/v2/spaces/90a92341-c29e-4989-978b-855939af2302/app_events"",
    ""events_url"": ""/v2/spaces/90a92341-c29e-4989-978b-855939af2302/events"",
    ""security_groups_url"": ""/v2/spaces/90a92341-c29e-4989-978b-855939af2302/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? developer_guid = Guid.NewGuid();


                var obj = cfClient.Spaces.AssociateDeveloperWithSpace(guid, developer_guid).Result;


                Assert.AreEqual("90a92341-c29e-4989-978b-855939af2302", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/90a92341-c29e-4989-978b-855939af2302", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:44Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-226", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("d0885638-372b-42be-8780-4743de3fc0f5", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/d0885638-372b-42be-8780-4743de3fc0f5", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/90a92341-c29e-4989-978b-855939af2302/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/90a92341-c29e-4989-978b-855939af2302/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/90a92341-c29e-4989-978b-855939af2302/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/90a92341-c29e-4989-978b-855939af2302/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/90a92341-c29e-4989-978b-855939af2302/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/90a92341-c29e-4989-978b-855939af2302/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/90a92341-c29e-4989-978b-855939af2302/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/90a92341-c29e-4989-978b-855939af2302/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/90a92341-c29e-4989-978b-855939af2302/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/90a92341-c29e-4989-978b-855939af2302/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void AssociateSecurityGroupWithSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""1b299474-bdc7-45ec-a862-37aa17e15edf"",
    ""url"": ""/v2/spaces/1b299474-bdc7-45ec-a862-37aa17e15edf"",
    ""created_at"": ""2016-02-09T10:21:44Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-244"",
    ""organization_guid"": ""25bd28ea-5df1-41b4-8222-ff880b0b4ae2"",
    ""space_quota_definition_guid"": null,
    ""organization_url"": ""/v2/organizations/25bd28ea-5df1-41b4-8222-ff880b0b4ae2"",
    ""developers_url"": ""/v2/spaces/1b299474-bdc7-45ec-a862-37aa17e15edf/developers"",
    ""managers_url"": ""/v2/spaces/1b299474-bdc7-45ec-a862-37aa17e15edf/managers"",
    ""auditors_url"": ""/v2/spaces/1b299474-bdc7-45ec-a862-37aa17e15edf/auditors"",
    ""apps_url"": ""/v2/spaces/1b299474-bdc7-45ec-a862-37aa17e15edf/apps"",
    ""routes_url"": ""/v2/spaces/1b299474-bdc7-45ec-a862-37aa17e15edf/routes"",
    ""domains_url"": ""/v2/spaces/1b299474-bdc7-45ec-a862-37aa17e15edf/domains"",
    ""service_instances_url"": ""/v2/spaces/1b299474-bdc7-45ec-a862-37aa17e15edf/service_instances"",
    ""app_events_url"": ""/v2/spaces/1b299474-bdc7-45ec-a862-37aa17e15edf/app_events"",
    ""events_url"": ""/v2/spaces/1b299474-bdc7-45ec-a862-37aa17e15edf/events"",
    ""security_groups_url"": ""/v2/spaces/1b299474-bdc7-45ec-a862-37aa17e15edf/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? security_group_guid = Guid.NewGuid();


                var obj = cfClient.Spaces.AssociateSecurityGroupWithSpace(guid, security_group_guid).Result;


                Assert.AreEqual("1b299474-bdc7-45ec-a862-37aa17e15edf", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/1b299474-bdc7-45ec-a862-37aa17e15edf", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:44Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-244", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("25bd28ea-5df1-41b4-8222-ff880b0b4ae2", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/25bd28ea-5df1-41b4-8222-ff880b0b4ae2", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/1b299474-bdc7-45ec-a862-37aa17e15edf/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/1b299474-bdc7-45ec-a862-37aa17e15edf/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/1b299474-bdc7-45ec-a862-37aa17e15edf/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/1b299474-bdc7-45ec-a862-37aa17e15edf/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/1b299474-bdc7-45ec-a862-37aa17e15edf/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/1b299474-bdc7-45ec-a862-37aa17e15edf/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/1b299474-bdc7-45ec-a862-37aa17e15edf/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/1b299474-bdc7-45ec-a862-37aa17e15edf/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/1b299474-bdc7-45ec-a862-37aa17e15edf/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/1b299474-bdc7-45ec-a862-37aa17e15edf/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void AssociateAuditorWithSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""53ef62cb-6e2d-4f42-91fa-4555b384fd92"",
    ""url"": ""/v2/spaces/53ef62cb-6e2d-4f42-91fa-4555b384fd92"",
    ""created_at"": ""2016-02-09T10:21:43Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-211"",
    ""organization_guid"": ""76719b60-33aa-4079-866f-887bbf740adb"",
    ""space_quota_definition_guid"": null,
    ""organization_url"": ""/v2/organizations/76719b60-33aa-4079-866f-887bbf740adb"",
    ""developers_url"": ""/v2/spaces/53ef62cb-6e2d-4f42-91fa-4555b384fd92/developers"",
    ""managers_url"": ""/v2/spaces/53ef62cb-6e2d-4f42-91fa-4555b384fd92/managers"",
    ""auditors_url"": ""/v2/spaces/53ef62cb-6e2d-4f42-91fa-4555b384fd92/auditors"",
    ""apps_url"": ""/v2/spaces/53ef62cb-6e2d-4f42-91fa-4555b384fd92/apps"",
    ""routes_url"": ""/v2/spaces/53ef62cb-6e2d-4f42-91fa-4555b384fd92/routes"",
    ""domains_url"": ""/v2/spaces/53ef62cb-6e2d-4f42-91fa-4555b384fd92/domains"",
    ""service_instances_url"": ""/v2/spaces/53ef62cb-6e2d-4f42-91fa-4555b384fd92/service_instances"",
    ""app_events_url"": ""/v2/spaces/53ef62cb-6e2d-4f42-91fa-4555b384fd92/app_events"",
    ""events_url"": ""/v2/spaces/53ef62cb-6e2d-4f42-91fa-4555b384fd92/events"",
    ""security_groups_url"": ""/v2/spaces/53ef62cb-6e2d-4f42-91fa-4555b384fd92/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? auditor_guid = Guid.NewGuid();


                var obj = cfClient.Spaces.AssociateAuditorWithSpace(guid, auditor_guid).Result;


                Assert.AreEqual("53ef62cb-6e2d-4f42-91fa-4555b384fd92", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/53ef62cb-6e2d-4f42-91fa-4555b384fd92", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:43Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-211", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("76719b60-33aa-4079-866f-887bbf740adb", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/76719b60-33aa-4079-866f-887bbf740adb", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/53ef62cb-6e2d-4f42-91fa-4555b384fd92/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/53ef62cb-6e2d-4f42-91fa-4555b384fd92/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/53ef62cb-6e2d-4f42-91fa-4555b384fd92/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/53ef62cb-6e2d-4f42-91fa-4555b384fd92/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/53ef62cb-6e2d-4f42-91fa-4555b384fd92/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/53ef62cb-6e2d-4f42-91fa-4555b384fd92/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/53ef62cb-6e2d-4f42-91fa-4555b384fd92/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/53ef62cb-6e2d-4f42-91fa-4555b384fd92/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/53ef62cb-6e2d-4f42-91fa-4555b384fd92/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/53ef62cb-6e2d-4f42-91fa-4555b384fd92/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void AssociateManagerWithSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""0cb915f7-7cd4-4fa8-a97b-8c461de470a4"",
    ""url"": ""/v2/spaces/0cb915f7-7cd4-4fa8-a97b-8c461de470a4"",
    ""created_at"": ""2016-02-09T10:21:44Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-256"",
    ""organization_guid"": ""fb102e68-24fd-4d4c-ab49-b2c259d2bafd"",
    ""space_quota_definition_guid"": null,
    ""organization_url"": ""/v2/organizations/fb102e68-24fd-4d4c-ab49-b2c259d2bafd"",
    ""developers_url"": ""/v2/spaces/0cb915f7-7cd4-4fa8-a97b-8c461de470a4/developers"",
    ""managers_url"": ""/v2/spaces/0cb915f7-7cd4-4fa8-a97b-8c461de470a4/managers"",
    ""auditors_url"": ""/v2/spaces/0cb915f7-7cd4-4fa8-a97b-8c461de470a4/auditors"",
    ""apps_url"": ""/v2/spaces/0cb915f7-7cd4-4fa8-a97b-8c461de470a4/apps"",
    ""routes_url"": ""/v2/spaces/0cb915f7-7cd4-4fa8-a97b-8c461de470a4/routes"",
    ""domains_url"": ""/v2/spaces/0cb915f7-7cd4-4fa8-a97b-8c461de470a4/domains"",
    ""service_instances_url"": ""/v2/spaces/0cb915f7-7cd4-4fa8-a97b-8c461de470a4/service_instances"",
    ""app_events_url"": ""/v2/spaces/0cb915f7-7cd4-4fa8-a97b-8c461de470a4/app_events"",
    ""events_url"": ""/v2/spaces/0cb915f7-7cd4-4fa8-a97b-8c461de470a4/events"",
    ""security_groups_url"": ""/v2/spaces/0cb915f7-7cd4-4fa8-a97b-8c461de470a4/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? manager_guid = Guid.NewGuid();


                var obj = cfClient.Spaces.AssociateManagerWithSpace(guid, manager_guid).Result;


                Assert.AreEqual("0cb915f7-7cd4-4fa8-a97b-8c461de470a4", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/0cb915f7-7cd4-4fa8-a97b-8c461de470a4", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:44Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-256", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("fb102e68-24fd-4d4c-ab49-b2c259d2bafd", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/fb102e68-24fd-4d4c-ab49-b2c259d2bafd", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/0cb915f7-7cd4-4fa8-a97b-8c461de470a4/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/0cb915f7-7cd4-4fa8-a97b-8c461de470a4/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/0cb915f7-7cd4-4fa8-a97b-8c461de470a4/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/0cb915f7-7cd4-4fa8-a97b-8c461de470a4/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/0cb915f7-7cd4-4fa8-a97b-8c461de470a4/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/0cb915f7-7cd4-4fa8-a97b-8c461de470a4/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/0cb915f7-7cd4-4fa8-a97b-8c461de470a4/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/0cb915f7-7cd4-4fa8-a97b-8c461de470a4/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/0cb915f7-7cd4-4fa8-a97b-8c461de470a4/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/0cb915f7-7cd4-4fa8-a97b-8c461de470a4/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveAuditorFromSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""744482bb-f753-42d1-99cb-ca348f1b5ce1"",
    ""url"": ""/v2/spaces/744482bb-f753-42d1-99cb-ca348f1b5ce1"",
    ""created_at"": ""2016-02-09T10:21:44Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-214"",
    ""organization_guid"": ""de1e9e54-f212-487b-88a1-73aa1155d7f7"",
    ""space_quota_definition_guid"": null,
    ""organization_url"": ""/v2/organizations/de1e9e54-f212-487b-88a1-73aa1155d7f7"",
    ""developers_url"": ""/v2/spaces/744482bb-f753-42d1-99cb-ca348f1b5ce1/developers"",
    ""managers_url"": ""/v2/spaces/744482bb-f753-42d1-99cb-ca348f1b5ce1/managers"",
    ""auditors_url"": ""/v2/spaces/744482bb-f753-42d1-99cb-ca348f1b5ce1/auditors"",
    ""apps_url"": ""/v2/spaces/744482bb-f753-42d1-99cb-ca348f1b5ce1/apps"",
    ""routes_url"": ""/v2/spaces/744482bb-f753-42d1-99cb-ca348f1b5ce1/routes"",
    ""domains_url"": ""/v2/spaces/744482bb-f753-42d1-99cb-ca348f1b5ce1/domains"",
    ""service_instances_url"": ""/v2/spaces/744482bb-f753-42d1-99cb-ca348f1b5ce1/service_instances"",
    ""app_events_url"": ""/v2/spaces/744482bb-f753-42d1-99cb-ca348f1b5ce1/app_events"",
    ""events_url"": ""/v2/spaces/744482bb-f753-42d1-99cb-ca348f1b5ce1/events"",
    ""security_groups_url"": ""/v2/spaces/744482bb-f753-42d1-99cb-ca348f1b5ce1/security_groups""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? auditor_guid = Guid.NewGuid();


                var obj = cfClient.Spaces.RemoveAuditorFromSpace(guid, auditor_guid).Result;


                Assert.AreEqual("744482bb-f753-42d1-99cb-ca348f1b5ce1", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/744482bb-f753-42d1-99cb-ca348f1b5ce1", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:44Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-214", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("de1e9e54-f212-487b-88a1-73aa1155d7f7", TestUtil.ToTestableString(obj.OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/de1e9e54-f212-487b-88a1-73aa1155d7f7", TestUtil.ToTestableString(obj.OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/744482bb-f753-42d1-99cb-ca348f1b5ce1/developers", TestUtil.ToTestableString(obj.DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/744482bb-f753-42d1-99cb-ca348f1b5ce1/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/744482bb-f753-42d1-99cb-ca348f1b5ce1/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/744482bb-f753-42d1-99cb-ca348f1b5ce1/apps", TestUtil.ToTestableString(obj.AppsUrl), true);
                Assert.AreEqual("/v2/spaces/744482bb-f753-42d1-99cb-ca348f1b5ce1/routes", TestUtil.ToTestableString(obj.RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/744482bb-f753-42d1-99cb-ca348f1b5ce1/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/744482bb-f753-42d1-99cb-ca348f1b5ce1/service_instances", TestUtil.ToTestableString(obj.ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/744482bb-f753-42d1-99cb-ca348f1b5ce1/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/744482bb-f753-42d1-99cb-ca348f1b5ce1/events", TestUtil.ToTestableString(obj.EventsUrl), true);
                Assert.AreEqual("/v2/spaces/744482bb-f753-42d1-99cb-ca348f1b5ce1/security_groups", TestUtil.ToTestableString(obj.SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServicesForSpaceTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""7f58edb5-c5e9-4fba-b159-21f93bf6395c"",
        ""url"": ""/v2/services/7f58edb5-c5e9-4fba-b159-21f93bf6395c"",
        ""created_at"": ""2016-02-09T10:21:43Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""label"": ""label-8"",
        ""provider"": null,
        ""url"": null,
        ""description"": ""desc-20"",
        ""long_description"": null,
        ""version"": null,
        ""info_url"": null,
        ""active"": true,
        ""bindable"": true,
        ""unique_id"": ""1c69eb83-924a-4a60-a877-6abf189d78b0"",
        ""extra"": null,
        ""tags"": [

        ],
        ""requires"": [

        ],
        ""documentation_url"": null,
        ""service_broker_guid"": ""181fbc68-a9d6-41b4-a4de-bbe8228bff29"",
        ""plan_updateable"": false,
        ""service_plans_url"": ""/v2/services/7f58edb5-c5e9-4fba-b159-21f93bf6395c/service_plans""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Spaces.ListAllServicesForSpace(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("7f58edb5-c5e9-4fba-b159-21f93bf6395c", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/services/7f58edb5-c5e9-4fba-b159-21f93bf6395c", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:43Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("label-8", TestUtil.ToTestableString(obj[0].Label), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Provider), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Url), true);
                Assert.AreEqual("desc-20", TestUtil.ToTestableString(obj[0].Description), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].LongDescription), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].InfoUrl), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Bindable), true);
                Assert.AreEqual("1c69eb83-924a-4a60-a877-6abf189d78b0", TestUtil.ToTestableString(obj[0].UniqueId), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Extra), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DocumentationUrl), true);
                Assert.AreEqual("181fbc68-a9d6-41b4-a4de-bbe8228bff29", TestUtil.ToTestableString(obj[0].ServiceBrokerGuid), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].PlanUpdateable), true);
                Assert.AreEqual("/v2/services/7f58edb5-c5e9-4fba-b159-21f93bf6395c/service_plans", TestUtil.ToTestableString(obj[0].ServicePlansUrl), true);

            }
        }

    }
}