//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client;
using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.CSharp;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.CodeDom.Compiler;

namespace CloudFoundry.CloudController.V2.Test.Deserialization
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class ServiceBrokersTest
    {


        [TestMethod]
        public void TestUpdateServiceBrokerResponse()
        {
            string json = @"{
  ""metadata"": {
    ""guid"": ""e9de2dc8-6735-4d82-b976-7c3770146a98"",
    ""created_at"": ""2016-02-09T10:21:41Z"",
    ""updated_at"": ""2016-02-09T10:21:41Z"",
    ""url"": ""/v2/service_brokers/e9de2dc8-6735-4d82-b976-7c3770146a98""
  },
  ""entity"": {
    ""name"": ""name-13"",
    ""broker_url"": ""https://mybroker.example.com"",
    ""auth_username"": ""admin-user""
  }
}";

            UpdateServiceBrokerResponse obj = Utilities.DeserializeJson<UpdateServiceBrokerResponse>(json);

            Assert.AreEqual("e9de2dc8-6735-4d82-b976-7c3770146a98", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
            Assert.AreEqual("2016-02-09T10:21:41Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
            Assert.AreEqual("2016-02-09T10:21:41Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("/v2/service_brokers/e9de2dc8-6735-4d82-b976-7c3770146a98", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
            Assert.AreEqual("name-13", TestUtil.ToTestableString(obj.Name), true);
            Assert.AreEqual("https://mybroker.example.com", TestUtil.ToTestableString(obj.BrokerUrl), true);
            Assert.AreEqual("admin-user", TestUtil.ToTestableString(obj.AuthUsername), true);
        }

        [TestMethod]
        public void TestCreateServiceBrokerResponse()
        {
            string json = @"{
  ""metadata"": {
    ""guid"": ""264acd8b-2757-4e54-abfa-2c01a71c7b2c"",
    ""created_at"": ""2016-02-09T10:21:41Z"",
    ""updated_at"": null,
    ""url"": ""/v2/service_brokers/264acd8b-2757-4e54-abfa-2c01a71c7b2c""
  },
  ""entity"": {
    ""name"": ""service-broker-name"",
    ""broker_url"": ""https://broker.example.com"",
    ""auth_username"": ""admin""
  }
}";

            CreateServiceBrokerResponse obj = Utilities.DeserializeJson<CreateServiceBrokerResponse>(json);

            Assert.AreEqual("264acd8b-2757-4e54-abfa-2c01a71c7b2c", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
            Assert.AreEqual("2016-02-09T10:21:41Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("/v2/service_brokers/264acd8b-2757-4e54-abfa-2c01a71c7b2c", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
            Assert.AreEqual("service-broker-name", TestUtil.ToTestableString(obj.Name), true);
            Assert.AreEqual("https://broker.example.com", TestUtil.ToTestableString(obj.BrokerUrl), true);
            Assert.AreEqual("admin", TestUtil.ToTestableString(obj.AuthUsername), true);
        }

        [TestMethod]
        public void TestListAllServiceBrokersResponse()
        {
            string json = @"{
  ""total_results"": 3,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""24683ed8-4d07-4cfe-a6aa-7ec2a1629459"",
        ""url"": ""/v2/service_brokers/24683ed8-4d07-4cfe-a6aa-7ec2a1629459"",
        ""created_at"": ""2016-02-09T10:21:41Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-10"",
        ""broker_url"": ""https://foo.com/url-4"",
        ""auth_username"": ""auth_username-4""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""62c873ce-9f94-43d8-a2ef-8b4f099c0464"",
        ""url"": ""/v2/service_brokers/62c873ce-9f94-43d8-a2ef-8b4f099c0464"",
        ""created_at"": ""2016-02-09T10:21:41Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-11"",
        ""broker_url"": ""https://foo.com/url-5"",
        ""auth_username"": ""auth_username-5""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""98b54566-1059-446b-add3-51cfb7311247"",
        ""url"": ""/v2/service_brokers/98b54566-1059-446b-add3-51cfb7311247"",
        ""created_at"": ""2016-02-09T10:21:41Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-12"",
        ""broker_url"": ""https://foo.com/url-6"",
        ""auth_username"": ""auth_username-6""
      }
    }
  ]
}";

            PagedResponseCollection<ListAllServiceBrokersResponse> page = Utilities.DeserializePage<ListAllServiceBrokersResponse>(json, null);

            Assert.AreEqual("3", TestUtil.ToTestableString(page.Properties.TotalResults), true);
            Assert.AreEqual("1", TestUtil.ToTestableString(page.Properties.TotalPages), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page.Properties.PreviousUrl), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page.Properties.NextUrl), true);
            Assert.AreEqual("24683ed8-4d07-4cfe-a6aa-7ec2a1629459", TestUtil.ToTestableString(page[0].EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/service_brokers/24683ed8-4d07-4cfe-a6aa-7ec2a1629459", TestUtil.ToTestableString(page[0].EntityMetadata.Url), true);
            Assert.AreEqual("2016-02-09T10:21:41Z", TestUtil.ToTestableString(page[0].EntityMetadata.CreatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[0].EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("name-10", TestUtil.ToTestableString(page[0].Name), true);
            Assert.AreEqual("https://foo.com/url-4", TestUtil.ToTestableString(page[0].BrokerUrl), true);
            Assert.AreEqual("auth_username-4", TestUtil.ToTestableString(page[0].AuthUsername), true);
            Assert.AreEqual("62c873ce-9f94-43d8-a2ef-8b4f099c0464", TestUtil.ToTestableString(page[1].EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/service_brokers/62c873ce-9f94-43d8-a2ef-8b4f099c0464", TestUtil.ToTestableString(page[1].EntityMetadata.Url), true);
            Assert.AreEqual("2016-02-09T10:21:41Z", TestUtil.ToTestableString(page[1].EntityMetadata.CreatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[1].EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("name-11", TestUtil.ToTestableString(page[1].Name), true);
            Assert.AreEqual("https://foo.com/url-5", TestUtil.ToTestableString(page[1].BrokerUrl), true);
            Assert.AreEqual("auth_username-5", TestUtil.ToTestableString(page[1].AuthUsername), true);
            Assert.AreEqual("98b54566-1059-446b-add3-51cfb7311247", TestUtil.ToTestableString(page[2].EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/service_brokers/98b54566-1059-446b-add3-51cfb7311247", TestUtil.ToTestableString(page[2].EntityMetadata.Url), true);
            Assert.AreEqual("2016-02-09T10:21:41Z", TestUtil.ToTestableString(page[2].EntityMetadata.CreatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(page[2].EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("name-12", TestUtil.ToTestableString(page[2].Name), true);
            Assert.AreEqual("https://foo.com/url-6", TestUtil.ToTestableString(page[2].BrokerUrl), true);
            Assert.AreEqual("auth_username-6", TestUtil.ToTestableString(page[2].AuthUsername), true);
        }

        [TestMethod]
        public void TestRetrieveServiceBrokerResponse()
        {
            string json = @"{
  ""metadata"": {
    ""guid"": ""85aa4724-7029-4c09-aea2-b56ccf1f299e"",
    ""url"": ""/v2/service_brokers/85aa4724-7029-4c09-aea2-b56ccf1f299e"",
    ""created_at"": ""2016-02-09T10:21:41Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-7"",
    ""broker_url"": ""https://foo.com/url-1"",
    ""auth_username"": ""auth_username-1""
  }
}";

            RetrieveServiceBrokerResponse obj = Utilities.DeserializeJson<RetrieveServiceBrokerResponse>(json);

            Assert.AreEqual("85aa4724-7029-4c09-aea2-b56ccf1f299e", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
            Assert.AreEqual("/v2/service_brokers/85aa4724-7029-4c09-aea2-b56ccf1f299e", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
            Assert.AreEqual("2016-02-09T10:21:41Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
            Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
            Assert.AreEqual("name-7", TestUtil.ToTestableString(obj.Name), true);
            Assert.AreEqual("https://foo.com/url-1", TestUtil.ToTestableString(obj.BrokerUrl), true);
            Assert.AreEqual("auth_username-1", TestUtil.ToTestableString(obj.AuthUsername), true);
        }
    }
}
