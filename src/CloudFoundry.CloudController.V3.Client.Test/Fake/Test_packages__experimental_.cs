//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V3.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V3.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class PackagesEndpoint
{
        [TestMethod]
        public void GetPackageTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""guid"": ""guid-62a421aa-1e0b-4e4b-9c4b-51ff0a6057ce"",
  ""type"": ""bits"",
  ""hash"": null,
  ""url"": null,
  ""state"": ""AWAITING_UPLOAD"",
  ""error"": null,
  ""created_at"": ""2015-06-30T07:10:53Z"",
  ""updated_at"": null,
  ""_links"": {
    ""self"": {
      ""href"": ""/v3/packages/guid-62a421aa-1e0b-4e4b-9c4b-51ff0a6057ce""
    },
    ""upload"": {
      ""href"": ""/v3/packages/guid-62a421aa-1e0b-4e4b-9c4b-51ff0a6057ce/upload"",
      ""method"": ""POST""
    },
    ""app"": {
      ""href"": ""/v3/apps/guid-8361e7f5-a4d1-42d1-a74f-4a1da80d44c8""
    }
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Packages.GetPackage(guid).Result;


                Assert.AreEqual("guid-62a421aa-1e0b-4e4b-9c4b-51ff0a6057ce", TestUtil.ToTestableString(obj.Guid), true);
                Assert.AreEqual("bits", TestUtil.ToTestableString(obj.Type), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Hash), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Url), true);
                Assert.AreEqual("AWAITING_UPLOAD", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Error), true);
                Assert.AreEqual("2015-06-30T07:10:53Z", TestUtil.ToTestableString(obj.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.UpdatedAt), true);

            }
        }

        [TestMethod]
        public void CreatePackageTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""guid"": ""ea8759d4-00c1-45f9-bcaa-6f63cdb0097d"",
  ""type"": ""docker"",
  ""hash"": null,
  ""url"": ""docker://cloudfoundry/runtime-ci"",
  ""state"": ""READY"",
  ""error"": null,
  ""created_at"": ""2015-06-30T07:10:53Z"",
  ""updated_at"": null,
  ""_links"": {
    ""self"": {
      ""href"": ""/v3/packages/ea8759d4-00c1-45f9-bcaa-6f63cdb0097d""
    },
    ""app"": {
      ""href"": ""/v3/apps/guid-a19e1170-7a28-4ae4-b98e-69cce235f7a7""
    }
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                CreatePackageRequest value = new CreatePackageRequest();


                var obj = cfClient.Packages.CreatePackage(guid, value).Result;


                Assert.AreEqual("ea8759d4-00c1-45f9-bcaa-6f63cdb0097d", TestUtil.ToTestableString(obj.Guid), true);
                Assert.AreEqual("docker", TestUtil.ToTestableString(obj.Type), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Hash), true);
                Assert.AreEqual("docker://cloudfoundry/runtime-ci", TestUtil.ToTestableString(obj.Url), true);
                Assert.AreEqual("READY", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Error), true);
                Assert.AreEqual("2015-06-30T07:10:53Z", TestUtil.ToTestableString(obj.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.UpdatedAt), true);

            }
        }

        [TestMethod]
        public void StagePackageTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""guid"": ""whatuuid"",
  ""state"": ""PENDING"",
  ""hash"": null,
  ""buildpack_git_url"": ""http://github.com/myorg/awesome-buildpack"",
  ""failure_reason"": null,
  ""detected_start_command"": null,
  ""procfile"": null,
  ""environment_variables"": {
    ""VCAP_APPLICATION"": {
      ""limits"": {
        ""mem"": 1024,
        ""disk"": 4096,
        ""fds"": 16384
      },
      ""application_version"": ""whatuuid"",
      ""application_name"": ""name-1978"",
      ""application_uris"": [

      ],
      ""version"": ""whatuuid"",
      ""name"": ""name-1978"",
      ""space_name"": ""name-1975"",
      ""space_id"": ""e1425c4a-02c4-4848-bc4e-86c21af44516"",
      ""uris"": [

      ],
      ""users"": null
    },
    ""CF_STACK"": ""trusty64""
  },
  ""created_at"": ""2015-06-30T07:10:53Z"",
  ""updated_at"": null,
  ""_links"": {
    ""self"": {
      ""href"": ""/v3/droplets/whatuuid""
    },
    ""package"": {
      ""href"": ""/v3/packages/guid-3be487b8-1212-4192-a3c6-c1b936e7b6ab""
    },
    ""app"": {
      ""href"": ""/v3/apps/guid-63f11614-907e-4f1e-bb85-1713bfadc92a""
    }
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                StagePackageRequest value = new StagePackageRequest();


                var obj = cfClient.Packages.StagePackage(guid, value).Result;


                Assert.AreEqual("whatuuid", TestUtil.ToTestableString(obj.Guid), true);
                Assert.AreEqual("PENDING", TestUtil.ToTestableString(obj.State), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Hash), true);
                Assert.AreEqual("http://github.com/myorg/awesome-buildpack", TestUtil.ToTestableString(obj.BuildpackGitUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.FailureReason), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.DetectedStartCommand), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Procfile), true);
                Assert.AreEqual("2015-06-30T07:10:53Z", TestUtil.ToTestableString(obj.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.UpdatedAt), true);

            }
        }

        [TestMethod]
        public void DeletePackageTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.Packages.DeletePackage(guid).Wait();

            }
        }

        [TestMethod]
        public void ListAllPackagesTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""pagination"": {
    ""total_results"": 3,
    ""first"": {
      ""href"": ""/v3/packages?page=1=2""
    },
    ""last"": {
      ""href"": ""/v3/packages?page=2=2""
    },
    ""next"": {
      ""href"": ""/v3/packages?page=2=2""
    },
    ""previous"": null
  },
  ""resources"": [
    {
      ""guid"": ""guid-876c0126-beb8-498c-b03d-63b8aedb2296"",
      ""type"": ""bits"",
      ""hash"": null,
      ""url"": null,
      ""state"": ""AWAITING_UPLOAD"",
      ""error"": null,
      ""created_at"": ""2015-06-30T07:10:53Z"",
      ""updated_at"": null,
      ""_links"": {
        ""self"": {
          ""href"": ""/v3/packages/guid-876c0126-beb8-498c-b03d-63b8aedb2296""
        },
        ""upload"": {
          ""href"": ""/v3/packages/guid-876c0126-beb8-498c-b03d-63b8aedb2296/upload"",
          ""method"": ""POST""
        },
        ""app"": {
          ""href"": ""/v3/apps/guid-c375fd16-bd5d-4b42-8d5b-44374e639475""
        }
      }
    },
    {
      ""guid"": ""guid-9a7163ed-4ba4-4e9e-997f-54fb6dde5486"",
      ""type"": ""docker"",
      ""hash"": null,
      ""url"": ""http://docker-repo/my-image"",
      ""state"": ""READY"",
      ""error"": null,
      ""created_at"": ""2015-06-30T07:10:53Z"",
      ""updated_at"": null,
      ""_links"": {
        ""self"": {
          ""href"": ""/v3/packages/guid-9a7163ed-4ba4-4e9e-997f-54fb6dde5486""
        },
        ""app"": {
          ""href"": ""/v3/apps/guid-c375fd16-bd5d-4b42-8d5b-44374e639475""
        }
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.Packages.ListAllPackages().Result;

                Assert.AreEqual("guid-876c0126-beb8-498c-b03d-63b8aedb2296", TestUtil.ToTestableString(obj[0].Guid), true);
                Assert.AreEqual("bits", TestUtil.ToTestableString(obj[0].Type), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Hash), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Url), true);
                Assert.AreEqual("AWAITING_UPLOAD", TestUtil.ToTestableString(obj[0].State), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Error), true);
                Assert.AreEqual("2015-06-30T07:10:53Z", TestUtil.ToTestableString(obj[0].CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].UpdatedAt), true);
                Assert.AreEqual("guid-9a7163ed-4ba4-4e9e-997f-54fb6dde5486", TestUtil.ToTestableString(obj[1].Guid), true);
                Assert.AreEqual("docker", TestUtil.ToTestableString(obj[1].Type), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].Hash), true);
                Assert.AreEqual("http://docker-repo/my-image", TestUtil.ToTestableString(obj[1].Url), true);
                Assert.AreEqual("READY", TestUtil.ToTestableString(obj[1].State), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].Error), true);
                Assert.AreEqual("2015-06-30T07:10:53Z", TestUtil.ToTestableString(obj[1].CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].UpdatedAt), true);

            }
        }

    }
}