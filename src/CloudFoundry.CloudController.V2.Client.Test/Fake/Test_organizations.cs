//------------------------------------------------------------------------------
// <auto-generated>
  //     This code was generated by a tool.
  //
  //     Changes to this file may cause incorrect behavior and will be lost if
  //     the code is regenerated.
  // </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by cf-sdk-builder
//

using CloudFoundry.CloudController.V2.Client.Data;
using Microsoft.QualityTools.Testing.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.CodeDom.Compiler;
using System.Net;
using System.Threading.Tasks;

namespace CloudFoundry.CloudController.V2.Client.Test.Fake
{
    [TestClass]
    [GeneratedCodeAttribute("cf-sdk-builder", "1.0.0.0")]
    public class OrganizationsEndpoint
{
        [TestMethod]
        public void GetOrganizationSummaryTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{""guid"":""dbcce32f-31ba-45ce-b770-c79989f2b3fa"",""name"":""name-153"",""status"":""active"",""spaces"":[{""guid"":""c8e77b97-e264-425f-b219-fb610d6bd921"",""name"":""name-155"",""service_count"":0,""app_count"":0,""mem_dev_total"":0,""mem_prod_total"":0}]}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.GetOrganizationSummary(guid).Result;


                Assert.AreEqual("dbcce32f-31ba-45ce-b770-c79989f2b3fa", TestUtil.ToTestableString(obj.Guid), true);
                Assert.AreEqual("name-153", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);

            }
        }

        [TestMethod]
        public void ListAllPrivateDomainsForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""0840e1ff-0bdc-4fa6-8e17-fe814fb2ffd0"",
        ""url"": ""/v2/private_domains/0840e1ff-0bdc-4fa6-8e17-fe814fb2ffd0"",
        ""created_at"": ""2016-02-09T10:21:55Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""domain-43.example.com"",
        ""owning_organization_guid"": ""64fe0c3f-a470-49b7-bc83-5b1a2afd806f"",
        ""owning_organization_url"": ""/v2/organizations/64fe0c3f-a470-49b7-bc83-5b1a2afd806f"",
        ""shared_organizations_url"": ""/v2/private_domains/0840e1ff-0bdc-4fa6-8e17-fe814fb2ffd0/shared_organizations""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllPrivateDomainsForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("0840e1ff-0bdc-4fa6-8e17-fe814fb2ffd0", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/private_domains/0840e1ff-0bdc-4fa6-8e17-fe814fb2ffd0", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:55Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("domain-43.example.com", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("64fe0c3f-a470-49b7-bc83-5b1a2afd806f", TestUtil.ToTestableString(obj[0].OwningOrganizationGuid), true);
                Assert.AreEqual("/v2/organizations/64fe0c3f-a470-49b7-bc83-5b1a2afd806f", TestUtil.ToTestableString(obj[0].OwningOrganizationUrl), true);
                Assert.AreEqual("/v2/private_domains/0840e1ff-0bdc-4fa6-8e17-fe814fb2ffd0/shared_organizations", TestUtil.ToTestableString(obj[0].SharedOrganizationsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllBillingManagersForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""uaa-id-348"",
        ""url"": ""/v2/users/uaa-id-348"",
        ""created_at"": ""2016-02-09T10:21:55Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""username"": ""billing_manager@example.com"",
        ""spaces_url"": ""/v2/users/uaa-id-348/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-348/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-348/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-348/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-348/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-348/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-348/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllBillingManagersForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("uaa-id-348", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-348", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:55Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("billing_manager@example.com", TestUtil.ToTestableString(obj[0].Username), true);
                Assert.AreEqual("/v2/users/uaa-id-348/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-348/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-348/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-348/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-348/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-348/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-348/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void UpdateOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""67bbe653-6175-4ecf-96f1-150e886d0b71"",
    ""url"": ""/v2/organizations/67bbe653-6175-4ecf-96f1-150e886d0b71"",
    ""created_at"": ""2016-02-09T10:21:56Z"",
    ""updated_at"": ""2016-02-09T10:21:56Z""
  },
  ""entity"": {
    ""name"": ""New Organization Name"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""20a52a63-0290-4e00-8210-f0e3d34b8fb5"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/20a52a63-0290-4e00-8210-f0e3d34b8fb5"",
    ""spaces_url"": ""/v2/organizations/67bbe653-6175-4ecf-96f1-150e886d0b71/spaces"",
    ""domains_url"": ""/v2/organizations/67bbe653-6175-4ecf-96f1-150e886d0b71/domains"",
    ""private_domains_url"": ""/v2/organizations/67bbe653-6175-4ecf-96f1-150e886d0b71/private_domains"",
    ""users_url"": ""/v2/organizations/67bbe653-6175-4ecf-96f1-150e886d0b71/users"",
    ""managers_url"": ""/v2/organizations/67bbe653-6175-4ecf-96f1-150e886d0b71/managers"",
    ""billing_managers_url"": ""/v2/organizations/67bbe653-6175-4ecf-96f1-150e886d0b71/billing_managers"",
    ""auditors_url"": ""/v2/organizations/67bbe653-6175-4ecf-96f1-150e886d0b71/auditors"",
    ""app_events_url"": ""/v2/organizations/67bbe653-6175-4ecf-96f1-150e886d0b71/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/67bbe653-6175-4ecf-96f1-150e886d0b71/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                UpdateOrganizationRequest value = new UpdateOrganizationRequest();


                var obj = cfClient.Organizations.UpdateOrganization(guid, value).Result;


                Assert.AreEqual("67bbe653-6175-4ecf-96f1-150e886d0b71", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/67bbe653-6175-4ecf-96f1-150e886d0b71", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:56Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("2016-02-09T10:21:56Z", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("New Organization Name", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("20a52a63-0290-4e00-8210-f0e3d34b8fb5", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/20a52a63-0290-4e00-8210-f0e3d34b8fb5", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/67bbe653-6175-4ecf-96f1-150e886d0b71/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/67bbe653-6175-4ecf-96f1-150e886d0b71/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/67bbe653-6175-4ecf-96f1-150e886d0b71/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/67bbe653-6175-4ecf-96f1-150e886d0b71/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/67bbe653-6175-4ecf-96f1-150e886d0b71/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/67bbe653-6175-4ecf-96f1-150e886d0b71/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/67bbe653-6175-4ecf-96f1-150e886d0b71/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/67bbe653-6175-4ecf-96f1-150e886d0b71/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/67bbe653-6175-4ecf-96f1-150e886d0b71/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveUserFromOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""a95f618b-3c21-4b0d-8ab5-3f80a92bcb38"",
    ""url"": ""/v2/organizations/a95f618b-3c21-4b0d-8ab5-3f80a92bcb38"",
    ""created_at"": ""2016-02-09T10:21:55Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1950"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""cdd4bd52-1f18-44e3-b545-5e250e08cc96"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/cdd4bd52-1f18-44e3-b545-5e250e08cc96"",
    ""spaces_url"": ""/v2/organizations/a95f618b-3c21-4b0d-8ab5-3f80a92bcb38/spaces"",
    ""domains_url"": ""/v2/organizations/a95f618b-3c21-4b0d-8ab5-3f80a92bcb38/domains"",
    ""private_domains_url"": ""/v2/organizations/a95f618b-3c21-4b0d-8ab5-3f80a92bcb38/private_domains"",
    ""users_url"": ""/v2/organizations/a95f618b-3c21-4b0d-8ab5-3f80a92bcb38/users"",
    ""managers_url"": ""/v2/organizations/a95f618b-3c21-4b0d-8ab5-3f80a92bcb38/managers"",
    ""billing_managers_url"": ""/v2/organizations/a95f618b-3c21-4b0d-8ab5-3f80a92bcb38/billing_managers"",
    ""auditors_url"": ""/v2/organizations/a95f618b-3c21-4b0d-8ab5-3f80a92bcb38/auditors"",
    ""app_events_url"": ""/v2/organizations/a95f618b-3c21-4b0d-8ab5-3f80a92bcb38/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/a95f618b-3c21-4b0d-8ab5-3f80a92bcb38/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? user_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RemoveUserFromOrganization(guid, user_guid).Result;


                Assert.AreEqual("a95f618b-3c21-4b0d-8ab5-3f80a92bcb38", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/a95f618b-3c21-4b0d-8ab5-3f80a92bcb38", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:55Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1950", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("cdd4bd52-1f18-44e3-b545-5e250e08cc96", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/cdd4bd52-1f18-44e3-b545-5e250e08cc96", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/a95f618b-3c21-4b0d-8ab5-3f80a92bcb38/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/a95f618b-3c21-4b0d-8ab5-3f80a92bcb38/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/a95f618b-3c21-4b0d-8ab5-3f80a92bcb38/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/a95f618b-3c21-4b0d-8ab5-3f80a92bcb38/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/a95f618b-3c21-4b0d-8ab5-3f80a92bcb38/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/a95f618b-3c21-4b0d-8ab5-3f80a92bcb38/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/a95f618b-3c21-4b0d-8ab5-3f80a92bcb38/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/a95f618b-3c21-4b0d-8ab5-3f80a92bcb38/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/a95f618b-3c21-4b0d-8ab5-3f80a92bcb38/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllDomainsForOrganizationDeprecatedTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 2,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""4d600acc-a047-41fe-a93b-87b39196304b"",
        ""url"": ""/v2/domains/4d600acc-a047-41fe-a93b-87b39196304b"",
        ""created_at"": ""2016-02-09T10:21:53Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""customer-app-domain1.com""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""4c6f4408-75f8-4a80-8fdf-04ae706cfb20"",
        ""url"": ""/v2/domains/4c6f4408-75f8-4a80-8fdf-04ae706cfb20"",
        ""created_at"": ""2016-02-09T10:21:53Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""customer-app-domain2.com""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllDomainsForOrganizationDeprecated(guid).Result;

                Assert.AreEqual("2", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("4d600acc-a047-41fe-a93b-87b39196304b", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/domains/4d600acc-a047-41fe-a93b-87b39196304b", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:53Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("customer-app-domain1.com", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("4c6f4408-75f8-4a80-8fdf-04ae706cfb20", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/domains/4c6f4408-75f8-4a80-8fdf-04ae706cfb20", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:53Z", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("customer-app-domain2.com", TestUtil.ToTestableString(obj[1].Name), true);

            }
        }

        [TestMethod]
        public void RetrievingOrganizationMemoryUsageTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{""memory_usage_in_mb"":0}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RetrievingOrganizationMemoryUsage(guid).Result;


                Assert.AreEqual("0", TestUtil.ToTestableString(obj.MemoryUsageInMb), true);

            }
        }

        [TestMethod]
        public void ListAllSpaceQuotaDefinitionsForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""d9cc7626-d2a2-447a-b1ea-beea002b9e33"",
        ""url"": ""/v2/space_quota_definitions/d9cc7626-d2a2-447a-b1ea-beea002b9e33"",
        ""created_at"": ""2016-02-09T10:21:55Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1965"",
        ""organization_guid"": ""709339fd-9b2e-4bbc-a197-341e3f6a6fc1"",
        ""non_basic_services_allowed"": true,
        ""total_services"": 60,
        ""total_routes"": 1000,
        ""memory_limit"": 20480,
        ""instance_memory_limit"": -1,
        ""organization_url"": ""/v2/organizations/709339fd-9b2e-4bbc-a197-341e3f6a6fc1"",
        ""spaces_url"": ""/v2/space_quota_definitions/d9cc7626-d2a2-447a-b1ea-beea002b9e33/spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllSpaceQuotaDefinitionsForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("d9cc7626-d2a2-447a-b1ea-beea002b9e33", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/space_quota_definitions/d9cc7626-d2a2-447a-b1ea-beea002b9e33", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:55Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1965", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("709339fd-9b2e-4bbc-a197-341e3f6a6fc1", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].NonBasicServicesAllowed), true);
                Assert.AreEqual("60", TestUtil.ToTestableString(obj[0].TotalServices), true);
                Assert.AreEqual("1000", TestUtil.ToTestableString(obj[0].TotalRoutes), true);
                Assert.AreEqual("20480", TestUtil.ToTestableString(obj[0].MemoryLimit), true);
                Assert.AreEqual("-1", TestUtil.ToTestableString(obj[0].InstanceMemoryLimit), true);
                Assert.AreEqual("/v2/organizations/709339fd-9b2e-4bbc-a197-341e3f6a6fc1", TestUtil.ToTestableString(obj[0].OrganizationUrl), true);
                Assert.AreEqual("/v2/space_quota_definitions/d9cc7626-d2a2-447a-b1ea-beea002b9e33/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);

            }
        }

        [TestMethod]
        public void RemovePrivateDomainFromOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""f99bed6c-60bd-488c-ae71-dd3ad9acc626"",
    ""url"": ""/v2/organizations/f99bed6c-60bd-488c-ae71-dd3ad9acc626"",
    ""created_at"": ""2016-02-09T10:21:55Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1976"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""0a078b1d-1b76-491d-88b2-fe4a57db2577"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/0a078b1d-1b76-491d-88b2-fe4a57db2577"",
    ""spaces_url"": ""/v2/organizations/f99bed6c-60bd-488c-ae71-dd3ad9acc626/spaces"",
    ""domains_url"": ""/v2/organizations/f99bed6c-60bd-488c-ae71-dd3ad9acc626/domains"",
    ""private_domains_url"": ""/v2/organizations/f99bed6c-60bd-488c-ae71-dd3ad9acc626/private_domains"",
    ""users_url"": ""/v2/organizations/f99bed6c-60bd-488c-ae71-dd3ad9acc626/users"",
    ""managers_url"": ""/v2/organizations/f99bed6c-60bd-488c-ae71-dd3ad9acc626/managers"",
    ""billing_managers_url"": ""/v2/organizations/f99bed6c-60bd-488c-ae71-dd3ad9acc626/billing_managers"",
    ""auditors_url"": ""/v2/organizations/f99bed6c-60bd-488c-ae71-dd3ad9acc626/auditors"",
    ""app_events_url"": ""/v2/organizations/f99bed6c-60bd-488c-ae71-dd3ad9acc626/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/f99bed6c-60bd-488c-ae71-dd3ad9acc626/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? private_domain_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RemovePrivateDomainFromOrganization(guid, private_domain_guid).Result;


                Assert.AreEqual("f99bed6c-60bd-488c-ae71-dd3ad9acc626", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/f99bed6c-60bd-488c-ae71-dd3ad9acc626", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:55Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1976", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("0a078b1d-1b76-491d-88b2-fe4a57db2577", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/0a078b1d-1b76-491d-88b2-fe4a57db2577", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/f99bed6c-60bd-488c-ae71-dd3ad9acc626/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/f99bed6c-60bd-488c-ae71-dd3ad9acc626/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/f99bed6c-60bd-488c-ae71-dd3ad9acc626/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/f99bed6c-60bd-488c-ae71-dd3ad9acc626/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/f99bed6c-60bd-488c-ae71-dd3ad9acc626/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/f99bed6c-60bd-488c-ae71-dd3ad9acc626/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/f99bed6c-60bd-488c-ae71-dd3ad9acc626/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/f99bed6c-60bd-488c-ae71-dd3ad9acc626/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/f99bed6c-60bd-488c-ae71-dd3ad9acc626/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveBillingManagerFromOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""12591087-8ff6-4af9-8ba1-7f0c6c8ba624"",
    ""url"": ""/v2/organizations/12591087-8ff6-4af9-8ba1-7f0c6c8ba624"",
    ""created_at"": ""2016-02-09T10:21:55Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1956"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""ae0f5958-4c9a-43c0-88e9-8e981221ec88"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/ae0f5958-4c9a-43c0-88e9-8e981221ec88"",
    ""spaces_url"": ""/v2/organizations/12591087-8ff6-4af9-8ba1-7f0c6c8ba624/spaces"",
    ""domains_url"": ""/v2/organizations/12591087-8ff6-4af9-8ba1-7f0c6c8ba624/domains"",
    ""private_domains_url"": ""/v2/organizations/12591087-8ff6-4af9-8ba1-7f0c6c8ba624/private_domains"",
    ""users_url"": ""/v2/organizations/12591087-8ff6-4af9-8ba1-7f0c6c8ba624/users"",
    ""managers_url"": ""/v2/organizations/12591087-8ff6-4af9-8ba1-7f0c6c8ba624/managers"",
    ""billing_managers_url"": ""/v2/organizations/12591087-8ff6-4af9-8ba1-7f0c6c8ba624/billing_managers"",
    ""auditors_url"": ""/v2/organizations/12591087-8ff6-4af9-8ba1-7f0c6c8ba624/auditors"",
    ""app_events_url"": ""/v2/organizations/12591087-8ff6-4af9-8ba1-7f0c6c8ba624/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/12591087-8ff6-4af9-8ba1-7f0c6c8ba624/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? billing_manager_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RemoveBillingManagerFromOrganization(guid, billing_manager_guid).Result;


                Assert.AreEqual("12591087-8ff6-4af9-8ba1-7f0c6c8ba624", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/12591087-8ff6-4af9-8ba1-7f0c6c8ba624", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:55Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1956", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("ae0f5958-4c9a-43c0-88e9-8e981221ec88", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/ae0f5958-4c9a-43c0-88e9-8e981221ec88", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/12591087-8ff6-4af9-8ba1-7f0c6c8ba624/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/12591087-8ff6-4af9-8ba1-7f0c6c8ba624/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/12591087-8ff6-4af9-8ba1-7f0c6c8ba624/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/12591087-8ff6-4af9-8ba1-7f0c6c8ba624/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/12591087-8ff6-4af9-8ba1-7f0c6c8ba624/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/12591087-8ff6-4af9-8ba1-7f0c6c8ba624/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/12591087-8ff6-4af9-8ba1-7f0c6c8ba624/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/12591087-8ff6-4af9-8ba1-7f0c6c8ba624/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/12591087-8ff6-4af9-8ba1-7f0c6c8ba624/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void DeleteOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                clients.ExpectedStatusCode = (HttpStatusCode)204;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                cfClient.Organizations.DeleteOrganization(guid).Wait();

            }
        }

        [TestMethod]
        public void AssociateUserWithOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""7c9ceda7-9416-4ffa-b973-9535f3834600"",
    ""url"": ""/v2/organizations/7c9ceda7-9416-4ffa-b973-9535f3834600"",
    ""created_at"": ""2016-02-09T10:21:55Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1948"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""38f580ec-6918-41df-9bc6-3a24f6c0af48"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/38f580ec-6918-41df-9bc6-3a24f6c0af48"",
    ""spaces_url"": ""/v2/organizations/7c9ceda7-9416-4ffa-b973-9535f3834600/spaces"",
    ""domains_url"": ""/v2/organizations/7c9ceda7-9416-4ffa-b973-9535f3834600/domains"",
    ""private_domains_url"": ""/v2/organizations/7c9ceda7-9416-4ffa-b973-9535f3834600/private_domains"",
    ""users_url"": ""/v2/organizations/7c9ceda7-9416-4ffa-b973-9535f3834600/users"",
    ""managers_url"": ""/v2/organizations/7c9ceda7-9416-4ffa-b973-9535f3834600/managers"",
    ""billing_managers_url"": ""/v2/organizations/7c9ceda7-9416-4ffa-b973-9535f3834600/billing_managers"",
    ""auditors_url"": ""/v2/organizations/7c9ceda7-9416-4ffa-b973-9535f3834600/auditors"",
    ""app_events_url"": ""/v2/organizations/7c9ceda7-9416-4ffa-b973-9535f3834600/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/7c9ceda7-9416-4ffa-b973-9535f3834600/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? user_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.AssociateUserWithOrganization(guid, user_guid).Result;


                Assert.AreEqual("7c9ceda7-9416-4ffa-b973-9535f3834600", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/7c9ceda7-9416-4ffa-b973-9535f3834600", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:55Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1948", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("38f580ec-6918-41df-9bc6-3a24f6c0af48", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/38f580ec-6918-41df-9bc6-3a24f6c0af48", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/7c9ceda7-9416-4ffa-b973-9535f3834600/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/7c9ceda7-9416-4ffa-b973-9535f3834600/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/7c9ceda7-9416-4ffa-b973-9535f3834600/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/7c9ceda7-9416-4ffa-b973-9535f3834600/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/7c9ceda7-9416-4ffa-b973-9535f3834600/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/7c9ceda7-9416-4ffa-b973-9535f3834600/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/7c9ceda7-9416-4ffa-b973-9535f3834600/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/7c9ceda7-9416-4ffa-b973-9535f3834600/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/7c9ceda7-9416-4ffa-b973-9535f3834600/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllSpacesForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""a88fffc0-3119-4332-9b2d-acb1d46d6370"",
        ""url"": ""/v2/spaces/a88fffc0-3119-4332-9b2d-acb1d46d6370"",
        ""created_at"": ""2016-02-09T10:21:56Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""name-1982"",
        ""organization_guid"": ""242fb3fd-bcae-46e7-a9ec-85cbc01fda2f"",
        ""space_quota_definition_guid"": null,
        ""organization_url"": ""/v2/organizations/242fb3fd-bcae-46e7-a9ec-85cbc01fda2f"",
        ""developers_url"": ""/v2/spaces/a88fffc0-3119-4332-9b2d-acb1d46d6370/developers"",
        ""managers_url"": ""/v2/spaces/a88fffc0-3119-4332-9b2d-acb1d46d6370/managers"",
        ""auditors_url"": ""/v2/spaces/a88fffc0-3119-4332-9b2d-acb1d46d6370/auditors"",
        ""apps_url"": ""/v2/spaces/a88fffc0-3119-4332-9b2d-acb1d46d6370/apps"",
        ""routes_url"": ""/v2/spaces/a88fffc0-3119-4332-9b2d-acb1d46d6370/routes"",
        ""domains_url"": ""/v2/spaces/a88fffc0-3119-4332-9b2d-acb1d46d6370/domains"",
        ""service_instances_url"": ""/v2/spaces/a88fffc0-3119-4332-9b2d-acb1d46d6370/service_instances"",
        ""app_events_url"": ""/v2/spaces/a88fffc0-3119-4332-9b2d-acb1d46d6370/app_events"",
        ""events_url"": ""/v2/spaces/a88fffc0-3119-4332-9b2d-acb1d46d6370/events"",
        ""security_groups_url"": ""/v2/spaces/a88fffc0-3119-4332-9b2d-acb1d46d6370/security_groups""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllSpacesForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("a88fffc0-3119-4332-9b2d-acb1d46d6370", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/spaces/a88fffc0-3119-4332-9b2d-acb1d46d6370", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:56Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1982", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("242fb3fd-bcae-46e7-a9ec-85cbc01fda2f", TestUtil.ToTestableString(obj[0].OrganizationGuid), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionGuid), true);
                Assert.AreEqual("/v2/organizations/242fb3fd-bcae-46e7-a9ec-85cbc01fda2f", TestUtil.ToTestableString(obj[0].OrganizationUrl), true);
                Assert.AreEqual("/v2/spaces/a88fffc0-3119-4332-9b2d-acb1d46d6370/developers", TestUtil.ToTestableString(obj[0].DevelopersUrl), true);
                Assert.AreEqual("/v2/spaces/a88fffc0-3119-4332-9b2d-acb1d46d6370/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/spaces/a88fffc0-3119-4332-9b2d-acb1d46d6370/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/spaces/a88fffc0-3119-4332-9b2d-acb1d46d6370/apps", TestUtil.ToTestableString(obj[0].AppsUrl), true);
                Assert.AreEqual("/v2/spaces/a88fffc0-3119-4332-9b2d-acb1d46d6370/routes", TestUtil.ToTestableString(obj[0].RoutesUrl), true);
                Assert.AreEqual("/v2/spaces/a88fffc0-3119-4332-9b2d-acb1d46d6370/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/spaces/a88fffc0-3119-4332-9b2d-acb1d46d6370/service_instances", TestUtil.ToTestableString(obj[0].ServiceInstancesUrl), true);
                Assert.AreEqual("/v2/spaces/a88fffc0-3119-4332-9b2d-acb1d46d6370/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/spaces/a88fffc0-3119-4332-9b2d-acb1d46d6370/events", TestUtil.ToTestableString(obj[0].EventsUrl), true);
                Assert.AreEqual("/v2/spaces/a88fffc0-3119-4332-9b2d-acb1d46d6370/security_groups", TestUtil.ToTestableString(obj[0].SecurityGroupsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllServicesForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""7c8a52c4-42c4-41d1-8d60-dc73c079ad10"",
        ""url"": ""/v2/services/7c8a52c4-42c4-41d1-8d60-dc73c079ad10"",
        ""created_at"": ""2016-02-09T10:21:55Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""label"": ""label-81"",
        ""provider"": null,
        ""url"": null,
        ""description"": ""desc-187"",
        ""long_description"": null,
        ""version"": null,
        ""info_url"": null,
        ""active"": true,
        ""bindable"": true,
        ""unique_id"": ""e6b34479-efd0-434b-bf2c-327afc7f2f4c"",
        ""extra"": null,
        ""tags"": [

        ],
        ""requires"": [

        ],
        ""documentation_url"": null,
        ""service_broker_guid"": ""4c9fa1cc-da5b-4882-85c3-fd6f44f092b5"",
        ""plan_updateable"": false,
        ""service_plans_url"": ""/v2/services/7c8a52c4-42c4-41d1-8d60-dc73c079ad10/service_plans""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllServicesForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("7c8a52c4-42c4-41d1-8d60-dc73c079ad10", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/services/7c8a52c4-42c4-41d1-8d60-dc73c079ad10", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:55Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("label-81", TestUtil.ToTestableString(obj[0].Label), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Provider), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Url), true);
                Assert.AreEqual("desc-187", TestUtil.ToTestableString(obj[0].Description), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].LongDescription), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Version), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].InfoUrl), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("true", TestUtil.ToTestableString(obj[0].Bindable), true);
                Assert.AreEqual("e6b34479-efd0-434b-bf2c-327afc7f2f4c", TestUtil.ToTestableString(obj[0].UniqueId), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].Extra), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DocumentationUrl), true);
                Assert.AreEqual("4c9fa1cc-da5b-4882-85c3-fd6f44f092b5", TestUtil.ToTestableString(obj[0].ServiceBrokerGuid), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].PlanUpdateable), true);
                Assert.AreEqual("/v2/services/7c8a52c4-42c4-41d1-8d60-dc73c079ad10/service_plans", TestUtil.ToTestableString(obj[0].ServicePlansUrl), true);

            }
        }

        [TestMethod]
        public void ListAllOrganizationsTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""21b05e41-2a93-45aa-8b06-b5512532a29a"",
        ""url"": ""/v2/organizations/21b05e41-2a93-45aa-8b06-b5512532a29a"",
        ""created_at"": ""2016-02-09T10:21:53Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""name"": ""the-system_domain-org-name"",
        ""billing_enabled"": false,
        ""quota_definition_guid"": ""fa140b8a-3f26-4e4d-97bc-84ab3b991ebf"",
        ""status"": ""active"",
        ""quota_definition_url"": ""/v2/quota_definitions/fa140b8a-3f26-4e4d-97bc-84ab3b991ebf"",
        ""spaces_url"": ""/v2/organizations/21b05e41-2a93-45aa-8b06-b5512532a29a/spaces"",
        ""domains_url"": ""/v2/organizations/21b05e41-2a93-45aa-8b06-b5512532a29a/domains"",
        ""private_domains_url"": ""/v2/organizations/21b05e41-2a93-45aa-8b06-b5512532a29a/private_domains"",
        ""users_url"": ""/v2/organizations/21b05e41-2a93-45aa-8b06-b5512532a29a/users"",
        ""managers_url"": ""/v2/organizations/21b05e41-2a93-45aa-8b06-b5512532a29a/managers"",
        ""billing_managers_url"": ""/v2/organizations/21b05e41-2a93-45aa-8b06-b5512532a29a/billing_managers"",
        ""auditors_url"": ""/v2/organizations/21b05e41-2a93-45aa-8b06-b5512532a29a/auditors"",
        ""app_events_url"": ""/v2/organizations/21b05e41-2a93-45aa-8b06-b5512532a29a/app_events"",
        ""space_quota_definitions_url"": ""/v2/organizations/21b05e41-2a93-45aa-8b06-b5512532a29a/space_quota_definitions""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();


                var obj = cfClient.Organizations.ListAllOrganizations().Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("21b05e41-2a93-45aa-8b06-b5512532a29a", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/21b05e41-2a93-45aa-8b06-b5512532a29a", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:53Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("the-system_domain-org-name", TestUtil.ToTestableString(obj[0].Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].BillingEnabled), true);
                Assert.AreEqual("fa140b8a-3f26-4e4d-97bc-84ab3b991ebf", TestUtil.ToTestableString(obj[0].QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj[0].Status), true);
                Assert.AreEqual("/v2/quota_definitions/fa140b8a-3f26-4e4d-97bc-84ab3b991ebf", TestUtil.ToTestableString(obj[0].QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/21b05e41-2a93-45aa-8b06-b5512532a29a/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/21b05e41-2a93-45aa-8b06-b5512532a29a/domains", TestUtil.ToTestableString(obj[0].DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/21b05e41-2a93-45aa-8b06-b5512532a29a/private_domains", TestUtil.ToTestableString(obj[0].PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/21b05e41-2a93-45aa-8b06-b5512532a29a/users", TestUtil.ToTestableString(obj[0].UsersUrl), true);
                Assert.AreEqual("/v2/organizations/21b05e41-2a93-45aa-8b06-b5512532a29a/managers", TestUtil.ToTestableString(obj[0].ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/21b05e41-2a93-45aa-8b06-b5512532a29a/billing_managers", TestUtil.ToTestableString(obj[0].BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/21b05e41-2a93-45aa-8b06-b5512532a29a/auditors", TestUtil.ToTestableString(obj[0].AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/21b05e41-2a93-45aa-8b06-b5512532a29a/app_events", TestUtil.ToTestableString(obj[0].AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/21b05e41-2a93-45aa-8b06-b5512532a29a/space_quota_definitions", TestUtil.ToTestableString(obj[0].SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllAuditorsForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""uaa-id-334"",
        ""url"": ""/v2/users/uaa-id-334"",
        ""created_at"": ""2016-02-09T10:21:55Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""username"": ""auditor@example.com"",
        ""spaces_url"": ""/v2/users/uaa-id-334/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-334/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-334/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-334/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-334/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-334/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-334/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllAuditorsForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("uaa-id-334", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-334", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:55Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("auditor@example.com", TestUtil.ToTestableString(obj[0].Username), true);
                Assert.AreEqual("/v2/users/uaa-id-334/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-334/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-334/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-334/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-334/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-334/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-334/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void ListAllUsersForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 1,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""uaa-id-341"",
        ""url"": ""/v2/users/uaa-id-341"",
        ""created_at"": ""2016-02-09T10:21:55Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""username"": ""user@example.com"",
        ""spaces_url"": ""/v2/users/uaa-id-341/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-341/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-341/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-341/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-341/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-341/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-341/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllUsersForOrganization(guid).Result;

                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("uaa-id-341", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-341", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:55Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("user@example.com", TestUtil.ToTestableString(obj[0].Username), true);
                Assert.AreEqual("/v2/users/uaa-id-341/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-341/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-341/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-341/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-341/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-341/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-341/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void RemoveManagerFromOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""bcd98e5e-94bb-4efa-a641-e6d1fa6f8b9a"",
    ""url"": ""/v2/organizations/bcd98e5e-94bb-4efa-a641-e6d1fa6f8b9a"",
    ""created_at"": ""2016-02-09T10:21:55Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1938"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""d474a62d-e465-4fec-aea4-10f437cc3f6c"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/d474a62d-e465-4fec-aea4-10f437cc3f6c"",
    ""spaces_url"": ""/v2/organizations/bcd98e5e-94bb-4efa-a641-e6d1fa6f8b9a/spaces"",
    ""domains_url"": ""/v2/organizations/bcd98e5e-94bb-4efa-a641-e6d1fa6f8b9a/domains"",
    ""private_domains_url"": ""/v2/organizations/bcd98e5e-94bb-4efa-a641-e6d1fa6f8b9a/private_domains"",
    ""users_url"": ""/v2/organizations/bcd98e5e-94bb-4efa-a641-e6d1fa6f8b9a/users"",
    ""managers_url"": ""/v2/organizations/bcd98e5e-94bb-4efa-a641-e6d1fa6f8b9a/managers"",
    ""billing_managers_url"": ""/v2/organizations/bcd98e5e-94bb-4efa-a641-e6d1fa6f8b9a/billing_managers"",
    ""auditors_url"": ""/v2/organizations/bcd98e5e-94bb-4efa-a641-e6d1fa6f8b9a/auditors"",
    ""app_events_url"": ""/v2/organizations/bcd98e5e-94bb-4efa-a641-e6d1fa6f8b9a/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/bcd98e5e-94bb-4efa-a641-e6d1fa6f8b9a/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? manager_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RemoveManagerFromOrganization(guid, manager_guid).Result;


                Assert.AreEqual("bcd98e5e-94bb-4efa-a641-e6d1fa6f8b9a", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/bcd98e5e-94bb-4efa-a641-e6d1fa6f8b9a", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:55Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1938", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("d474a62d-e465-4fec-aea4-10f437cc3f6c", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/d474a62d-e465-4fec-aea4-10f437cc3f6c", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/bcd98e5e-94bb-4efa-a641-e6d1fa6f8b9a/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/bcd98e5e-94bb-4efa-a641-e6d1fa6f8b9a/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/bcd98e5e-94bb-4efa-a641-e6d1fa6f8b9a/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/bcd98e5e-94bb-4efa-a641-e6d1fa6f8b9a/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/bcd98e5e-94bb-4efa-a641-e6d1fa6f8b9a/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/bcd98e5e-94bb-4efa-a641-e6d1fa6f8b9a/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/bcd98e5e-94bb-4efa-a641-e6d1fa6f8b9a/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/bcd98e5e-94bb-4efa-a641-e6d1fa6f8b9a/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/bcd98e5e-94bb-4efa-a641-e6d1fa6f8b9a/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void ListAllManagersForOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""total_results"": 2,
  ""total_pages"": 1,
  ""prev_url"": null,
  ""next_url"": null,
  ""resources"": [
    {
      ""metadata"": {
        ""guid"": ""uaa-id-324"",
        ""url"": ""/v2/users/uaa-id-324"",
        ""created_at"": ""2016-02-09T10:21:55Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""username"": ""manager@example.com"",
        ""spaces_url"": ""/v2/users/uaa-id-324/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-324/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-324/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-324/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-324/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-324/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-324/audited_spaces""
      }
    },
    {
      ""metadata"": {
        ""guid"": ""uaa-id-325"",
        ""url"": ""/v2/users/uaa-id-325"",
        ""created_at"": ""2016-02-09T10:21:55Z"",
        ""updated_at"": null
      },
      ""entity"": {
        ""admin"": false,
        ""active"": false,
        ""default_space_guid"": null,
        ""spaces_url"": ""/v2/users/uaa-id-325/spaces"",
        ""organizations_url"": ""/v2/users/uaa-id-325/organizations"",
        ""managed_organizations_url"": ""/v2/users/uaa-id-325/managed_organizations"",
        ""billing_managed_organizations_url"": ""/v2/users/uaa-id-325/billing_managed_organizations"",
        ""audited_organizations_url"": ""/v2/users/uaa-id-325/audited_organizations"",
        ""managed_spaces_url"": ""/v2/users/uaa-id-325/managed_spaces"",
        ""audited_spaces_url"": ""/v2/users/uaa-id-325/audited_spaces""
      }
    }
  ]
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.ListAllManagersForOrganization(guid).Result;

                Assert.AreEqual("2", TestUtil.ToTestableString(obj.Properties.TotalResults), true);
                Assert.AreEqual("1", TestUtil.ToTestableString(obj.Properties.TotalPages), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.PreviousUrl), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.Properties.NextUrl), true);
                Assert.AreEqual("uaa-id-324", TestUtil.ToTestableString(obj[0].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-324", TestUtil.ToTestableString(obj[0].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:55Z", TestUtil.ToTestableString(obj[0].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[0].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[0].DefaultSpaceGuid), true);
                Assert.AreEqual("manager@example.com", TestUtil.ToTestableString(obj[0].Username), true);
                Assert.AreEqual("/v2/users/uaa-id-324/spaces", TestUtil.ToTestableString(obj[0].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-324/organizations", TestUtil.ToTestableString(obj[0].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-324/managed_organizations", TestUtil.ToTestableString(obj[0].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-324/billing_managed_organizations", TestUtil.ToTestableString(obj[0].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-324/audited_organizations", TestUtil.ToTestableString(obj[0].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-324/managed_spaces", TestUtil.ToTestableString(obj[0].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-324/audited_spaces", TestUtil.ToTestableString(obj[0].AuditedSpacesUrl), true);
                Assert.AreEqual("uaa-id-325", TestUtil.ToTestableString(obj[1].EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/users/uaa-id-325", TestUtil.ToTestableString(obj[1].EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:55Z", TestUtil.ToTestableString(obj[1].EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[1].Admin), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj[1].Active), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj[1].DefaultSpaceGuid), true);
                Assert.AreEqual("/v2/users/uaa-id-325/spaces", TestUtil.ToTestableString(obj[1].SpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-325/organizations", TestUtil.ToTestableString(obj[1].OrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-325/managed_organizations", TestUtil.ToTestableString(obj[1].ManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-325/billing_managed_organizations", TestUtil.ToTestableString(obj[1].BillingManagedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-325/audited_organizations", TestUtil.ToTestableString(obj[1].AuditedOrganizationsUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-325/managed_spaces", TestUtil.ToTestableString(obj[1].ManagedSpacesUrl), true);
                Assert.AreEqual("/v2/users/uaa-id-325/audited_spaces", TestUtil.ToTestableString(obj[1].AuditedSpacesUrl), true);

            }
        }

        [TestMethod]
        public void CreateOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""c292b788-0b83-4ae3-bf4f-2733f950c18e"",
    ""url"": ""/v2/organizations/c292b788-0b83-4ae3-bf4f-2733f950c18e"",
    ""created_at"": ""2016-02-09T10:21:56Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""my-org-name"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""df0b2a62-58ed-46dc-be08-73d30826d4e7"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/df0b2a62-58ed-46dc-be08-73d30826d4e7"",
    ""spaces_url"": ""/v2/organizations/c292b788-0b83-4ae3-bf4f-2733f950c18e/spaces"",
    ""domains_url"": ""/v2/organizations/c292b788-0b83-4ae3-bf4f-2733f950c18e/domains"",
    ""private_domains_url"": ""/v2/organizations/c292b788-0b83-4ae3-bf4f-2733f950c18e/private_domains"",
    ""users_url"": ""/v2/organizations/c292b788-0b83-4ae3-bf4f-2733f950c18e/users"",
    ""managers_url"": ""/v2/organizations/c292b788-0b83-4ae3-bf4f-2733f950c18e/managers"",
    ""billing_managers_url"": ""/v2/organizations/c292b788-0b83-4ae3-bf4f-2733f950c18e/billing_managers"",
    ""auditors_url"": ""/v2/organizations/c292b788-0b83-4ae3-bf4f-2733f950c18e/auditors"",
    ""app_events_url"": ""/v2/organizations/c292b788-0b83-4ae3-bf4f-2733f950c18e/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/c292b788-0b83-4ae3-bf4f-2733f950c18e/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                CreateOrganizationRequest value = new CreateOrganizationRequest();


                var obj = cfClient.Organizations.CreateOrganization(value).Result;


                Assert.AreEqual("c292b788-0b83-4ae3-bf4f-2733f950c18e", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/c292b788-0b83-4ae3-bf4f-2733f950c18e", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:56Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("my-org-name", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("df0b2a62-58ed-46dc-be08-73d30826d4e7", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/df0b2a62-58ed-46dc-be08-73d30826d4e7", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/c292b788-0b83-4ae3-bf4f-2733f950c18e/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/c292b788-0b83-4ae3-bf4f-2733f950c18e/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/c292b788-0b83-4ae3-bf4f-2733f950c18e/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/c292b788-0b83-4ae3-bf4f-2733f950c18e/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/c292b788-0b83-4ae3-bf4f-2733f950c18e/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/c292b788-0b83-4ae3-bf4f-2733f950c18e/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/c292b788-0b83-4ae3-bf4f-2733f950c18e/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/c292b788-0b83-4ae3-bf4f-2733f950c18e/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/c292b788-0b83-4ae3-bf4f-2733f950c18e/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void AssociateBillingManagerWithOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""b3536368-1005-47e2-820f-0bc90a73b975"",
    ""url"": ""/v2/organizations/b3536368-1005-47e2-820f-0bc90a73b975"",
    ""created_at"": ""2016-02-09T10:21:55Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1954"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""c423adb3-c489-4d6d-a765-aa8d4857c787"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/c423adb3-c489-4d6d-a765-aa8d4857c787"",
    ""spaces_url"": ""/v2/organizations/b3536368-1005-47e2-820f-0bc90a73b975/spaces"",
    ""domains_url"": ""/v2/organizations/b3536368-1005-47e2-820f-0bc90a73b975/domains"",
    ""private_domains_url"": ""/v2/organizations/b3536368-1005-47e2-820f-0bc90a73b975/private_domains"",
    ""users_url"": ""/v2/organizations/b3536368-1005-47e2-820f-0bc90a73b975/users"",
    ""managers_url"": ""/v2/organizations/b3536368-1005-47e2-820f-0bc90a73b975/managers"",
    ""billing_managers_url"": ""/v2/organizations/b3536368-1005-47e2-820f-0bc90a73b975/billing_managers"",
    ""auditors_url"": ""/v2/organizations/b3536368-1005-47e2-820f-0bc90a73b975/auditors"",
    ""app_events_url"": ""/v2/organizations/b3536368-1005-47e2-820f-0bc90a73b975/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/b3536368-1005-47e2-820f-0bc90a73b975/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? billing_manager_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.AssociateBillingManagerWithOrganization(guid, billing_manager_guid).Result;


                Assert.AreEqual("b3536368-1005-47e2-820f-0bc90a73b975", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/b3536368-1005-47e2-820f-0bc90a73b975", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:55Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1954", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("c423adb3-c489-4d6d-a765-aa8d4857c787", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/c423adb3-c489-4d6d-a765-aa8d4857c787", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/b3536368-1005-47e2-820f-0bc90a73b975/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/b3536368-1005-47e2-820f-0bc90a73b975/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/b3536368-1005-47e2-820f-0bc90a73b975/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/b3536368-1005-47e2-820f-0bc90a73b975/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/b3536368-1005-47e2-820f-0bc90a73b975/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/b3536368-1005-47e2-820f-0bc90a73b975/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/b3536368-1005-47e2-820f-0bc90a73b975/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/b3536368-1005-47e2-820f-0bc90a73b975/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/b3536368-1005-47e2-820f-0bc90a73b975/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void RetrieveOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""10d02082-08ac-4b7d-8414-11ff998c5288"",
    ""url"": ""/v2/organizations/10d02082-08ac-4b7d-8414-11ff998c5288"",
    ""created_at"": ""2016-02-09T10:21:56Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1987"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""c938b078-125c-43c9-a8ce-1e533e42cb9f"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/c938b078-125c-43c9-a8ce-1e533e42cb9f"",
    ""spaces_url"": ""/v2/organizations/10d02082-08ac-4b7d-8414-11ff998c5288/spaces"",
    ""domains_url"": ""/v2/organizations/10d02082-08ac-4b7d-8414-11ff998c5288/domains"",
    ""private_domains_url"": ""/v2/organizations/10d02082-08ac-4b7d-8414-11ff998c5288/private_domains"",
    ""users_url"": ""/v2/organizations/10d02082-08ac-4b7d-8414-11ff998c5288/users"",
    ""managers_url"": ""/v2/organizations/10d02082-08ac-4b7d-8414-11ff998c5288/managers"",
    ""billing_managers_url"": ""/v2/organizations/10d02082-08ac-4b7d-8414-11ff998c5288/billing_managers"",
    ""auditors_url"": ""/v2/organizations/10d02082-08ac-4b7d-8414-11ff998c5288/auditors"",
    ""app_events_url"": ""/v2/organizations/10d02082-08ac-4b7d-8414-11ff998c5288/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/10d02082-08ac-4b7d-8414-11ff998c5288/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)200;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RetrieveOrganization(guid).Result;


                Assert.AreEqual("10d02082-08ac-4b7d-8414-11ff998c5288", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/10d02082-08ac-4b7d-8414-11ff998c5288", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:56Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1987", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("c938b078-125c-43c9-a8ce-1e533e42cb9f", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/c938b078-125c-43c9-a8ce-1e533e42cb9f", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/10d02082-08ac-4b7d-8414-11ff998c5288/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/10d02082-08ac-4b7d-8414-11ff998c5288/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/10d02082-08ac-4b7d-8414-11ff998c5288/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/10d02082-08ac-4b7d-8414-11ff998c5288/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/10d02082-08ac-4b7d-8414-11ff998c5288/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/10d02082-08ac-4b7d-8414-11ff998c5288/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/10d02082-08ac-4b7d-8414-11ff998c5288/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/10d02082-08ac-4b7d-8414-11ff998c5288/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/10d02082-08ac-4b7d-8414-11ff998c5288/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void AssociateAuditorWithOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""929a923a-40e1-4ff4-893b-8c4bf275c227"",
    ""url"": ""/v2/organizations/929a923a-40e1-4ff4-893b-8c4bf275c227"",
    ""created_at"": ""2016-02-09T10:21:55Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1942"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""bac80683-aae6-44d5-86c9-9a11a9ff5a68"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/bac80683-aae6-44d5-86c9-9a11a9ff5a68"",
    ""spaces_url"": ""/v2/organizations/929a923a-40e1-4ff4-893b-8c4bf275c227/spaces"",
    ""domains_url"": ""/v2/organizations/929a923a-40e1-4ff4-893b-8c4bf275c227/domains"",
    ""private_domains_url"": ""/v2/organizations/929a923a-40e1-4ff4-893b-8c4bf275c227/private_domains"",
    ""users_url"": ""/v2/organizations/929a923a-40e1-4ff4-893b-8c4bf275c227/users"",
    ""managers_url"": ""/v2/organizations/929a923a-40e1-4ff4-893b-8c4bf275c227/managers"",
    ""billing_managers_url"": ""/v2/organizations/929a923a-40e1-4ff4-893b-8c4bf275c227/billing_managers"",
    ""auditors_url"": ""/v2/organizations/929a923a-40e1-4ff4-893b-8c4bf275c227/auditors"",
    ""app_events_url"": ""/v2/organizations/929a923a-40e1-4ff4-893b-8c4bf275c227/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/929a923a-40e1-4ff4-893b-8c4bf275c227/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? auditor_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.AssociateAuditorWithOrganization(guid, auditor_guid).Result;


                Assert.AreEqual("929a923a-40e1-4ff4-893b-8c4bf275c227", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/929a923a-40e1-4ff4-893b-8c4bf275c227", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:55Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1942", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("bac80683-aae6-44d5-86c9-9a11a9ff5a68", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/bac80683-aae6-44d5-86c9-9a11a9ff5a68", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/929a923a-40e1-4ff4-893b-8c4bf275c227/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/929a923a-40e1-4ff4-893b-8c4bf275c227/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/929a923a-40e1-4ff4-893b-8c4bf275c227/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/929a923a-40e1-4ff4-893b-8c4bf275c227/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/929a923a-40e1-4ff4-893b-8c4bf275c227/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/929a923a-40e1-4ff4-893b-8c4bf275c227/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/929a923a-40e1-4ff4-893b-8c4bf275c227/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/929a923a-40e1-4ff4-893b-8c4bf275c227/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/929a923a-40e1-4ff4-893b-8c4bf275c227/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void AssociatePrivateDomainWithOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""2fc524b4-b411-4a51-89fa-43bbadaea2b8"",
    ""url"": ""/v2/organizations/2fc524b4-b411-4a51-89fa-43bbadaea2b8"",
    ""created_at"": ""2016-02-09T10:21:55Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1970"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""f52795c1-9f69-40bf-934e-deb6d6a1be8d"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/f52795c1-9f69-40bf-934e-deb6d6a1be8d"",
    ""spaces_url"": ""/v2/organizations/2fc524b4-b411-4a51-89fa-43bbadaea2b8/spaces"",
    ""domains_url"": ""/v2/organizations/2fc524b4-b411-4a51-89fa-43bbadaea2b8/domains"",
    ""private_domains_url"": ""/v2/organizations/2fc524b4-b411-4a51-89fa-43bbadaea2b8/private_domains"",
    ""users_url"": ""/v2/organizations/2fc524b4-b411-4a51-89fa-43bbadaea2b8/users"",
    ""managers_url"": ""/v2/organizations/2fc524b4-b411-4a51-89fa-43bbadaea2b8/managers"",
    ""billing_managers_url"": ""/v2/organizations/2fc524b4-b411-4a51-89fa-43bbadaea2b8/billing_managers"",
    ""auditors_url"": ""/v2/organizations/2fc524b4-b411-4a51-89fa-43bbadaea2b8/auditors"",
    ""app_events_url"": ""/v2/organizations/2fc524b4-b411-4a51-89fa-43bbadaea2b8/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/2fc524b4-b411-4a51-89fa-43bbadaea2b8/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? private_domain_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.AssociatePrivateDomainWithOrganization(guid, private_domain_guid).Result;


                Assert.AreEqual("2fc524b4-b411-4a51-89fa-43bbadaea2b8", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/2fc524b4-b411-4a51-89fa-43bbadaea2b8", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:55Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1970", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("f52795c1-9f69-40bf-934e-deb6d6a1be8d", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/f52795c1-9f69-40bf-934e-deb6d6a1be8d", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/2fc524b4-b411-4a51-89fa-43bbadaea2b8/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/2fc524b4-b411-4a51-89fa-43bbadaea2b8/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/2fc524b4-b411-4a51-89fa-43bbadaea2b8/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/2fc524b4-b411-4a51-89fa-43bbadaea2b8/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/2fc524b4-b411-4a51-89fa-43bbadaea2b8/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/2fc524b4-b411-4a51-89fa-43bbadaea2b8/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/2fc524b4-b411-4a51-89fa-43bbadaea2b8/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/2fc524b4-b411-4a51-89fa-43bbadaea2b8/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/2fc524b4-b411-4a51-89fa-43bbadaea2b8/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void RemoveAuditorFromOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""98cc3757-f114-4251-b68c-84ba71034070"",
    ""url"": ""/v2/organizations/98cc3757-f114-4251-b68c-84ba71034070"",
    ""created_at"": ""2016-02-09T10:21:55Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1944"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""7a669d8b-c4c5-4151-b394-dd2157f121b2"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/7a669d8b-c4c5-4151-b394-dd2157f121b2"",
    ""spaces_url"": ""/v2/organizations/98cc3757-f114-4251-b68c-84ba71034070/spaces"",
    ""domains_url"": ""/v2/organizations/98cc3757-f114-4251-b68c-84ba71034070/domains"",
    ""private_domains_url"": ""/v2/organizations/98cc3757-f114-4251-b68c-84ba71034070/private_domains"",
    ""users_url"": ""/v2/organizations/98cc3757-f114-4251-b68c-84ba71034070/users"",
    ""managers_url"": ""/v2/organizations/98cc3757-f114-4251-b68c-84ba71034070/managers"",
    ""billing_managers_url"": ""/v2/organizations/98cc3757-f114-4251-b68c-84ba71034070/billing_managers"",
    ""auditors_url"": ""/v2/organizations/98cc3757-f114-4251-b68c-84ba71034070/auditors"",
    ""app_events_url"": ""/v2/organizations/98cc3757-f114-4251-b68c-84ba71034070/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/98cc3757-f114-4251-b68c-84ba71034070/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? auditor_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.RemoveAuditorFromOrganization(guid, auditor_guid).Result;


                Assert.AreEqual("98cc3757-f114-4251-b68c-84ba71034070", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/98cc3757-f114-4251-b68c-84ba71034070", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:55Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1944", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("7a669d8b-c4c5-4151-b394-dd2157f121b2", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/7a669d8b-c4c5-4151-b394-dd2157f121b2", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/98cc3757-f114-4251-b68c-84ba71034070/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/98cc3757-f114-4251-b68c-84ba71034070/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/98cc3757-f114-4251-b68c-84ba71034070/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/98cc3757-f114-4251-b68c-84ba71034070/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/98cc3757-f114-4251-b68c-84ba71034070/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/98cc3757-f114-4251-b68c-84ba71034070/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/98cc3757-f114-4251-b68c-84ba71034070/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/98cc3757-f114-4251-b68c-84ba71034070/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/98cc3757-f114-4251-b68c-84ba71034070/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

        [TestMethod]
        public void AssociateManagerWithOrganizationTest()
        {
            using (ShimsContext.Create())
            {
                MockClients clients = new MockClients();

                string json = @"{
  ""metadata"": {
    ""guid"": ""d51fd767-8fb3-45b2-b663-7f8a19a524e1"",
    ""url"": ""/v2/organizations/d51fd767-8fb3-45b2-b663-7f8a19a524e1"",
    ""created_at"": ""2016-02-09T10:21:55Z"",
    ""updated_at"": null
  },
  ""entity"": {
    ""name"": ""name-1936"",
    ""billing_enabled"": false,
    ""quota_definition_guid"": ""d92ee5aa-6581-4739-ba23-59b678b6e374"",
    ""status"": ""active"",
    ""quota_definition_url"": ""/v2/quota_definitions/d92ee5aa-6581-4739-ba23-59b678b6e374"",
    ""spaces_url"": ""/v2/organizations/d51fd767-8fb3-45b2-b663-7f8a19a524e1/spaces"",
    ""domains_url"": ""/v2/organizations/d51fd767-8fb3-45b2-b663-7f8a19a524e1/domains"",
    ""private_domains_url"": ""/v2/organizations/d51fd767-8fb3-45b2-b663-7f8a19a524e1/private_domains"",
    ""users_url"": ""/v2/organizations/d51fd767-8fb3-45b2-b663-7f8a19a524e1/users"",
    ""managers_url"": ""/v2/organizations/d51fd767-8fb3-45b2-b663-7f8a19a524e1/managers"",
    ""billing_managers_url"": ""/v2/organizations/d51fd767-8fb3-45b2-b663-7f8a19a524e1/billing_managers"",
    ""auditors_url"": ""/v2/organizations/d51fd767-8fb3-45b2-b663-7f8a19a524e1/auditors"",
    ""app_events_url"": ""/v2/organizations/d51fd767-8fb3-45b2-b663-7f8a19a524e1/app_events"",
    ""space_quota_definitions_url"": ""/v2/organizations/d51fd767-8fb3-45b2-b663-7f8a19a524e1/space_quota_definitions""
  }
}";
                clients.JsonResponse = json;

                clients.ExpectedStatusCode = (HttpStatusCode)201;
                var cfClient = clients.CreateCloudFoundryClient();

                Guid? guid = Guid.NewGuid();

                Guid? manager_guid = Guid.NewGuid();


                var obj = cfClient.Organizations.AssociateManagerWithOrganization(guid, manager_guid).Result;


                Assert.AreEqual("d51fd767-8fb3-45b2-b663-7f8a19a524e1", TestUtil.ToTestableString(obj.EntityMetadata.Guid), true);
                Assert.AreEqual("/v2/organizations/d51fd767-8fb3-45b2-b663-7f8a19a524e1", TestUtil.ToTestableString(obj.EntityMetadata.Url), true);
                Assert.AreEqual("2016-02-09T10:21:55Z", TestUtil.ToTestableString(obj.EntityMetadata.CreatedAt), true);
                Assert.AreEqual("", TestUtil.ToTestableString(obj.EntityMetadata.UpdatedAt), true);
                Assert.AreEqual("name-1936", TestUtil.ToTestableString(obj.Name), true);
                Assert.AreEqual("false", TestUtil.ToTestableString(obj.BillingEnabled), true);
                Assert.AreEqual("d92ee5aa-6581-4739-ba23-59b678b6e374", TestUtil.ToTestableString(obj.QuotaDefinitionGuid), true);
                Assert.AreEqual("active", TestUtil.ToTestableString(obj.Status), true);
                Assert.AreEqual("/v2/quota_definitions/d92ee5aa-6581-4739-ba23-59b678b6e374", TestUtil.ToTestableString(obj.QuotaDefinitionUrl), true);
                Assert.AreEqual("/v2/organizations/d51fd767-8fb3-45b2-b663-7f8a19a524e1/spaces", TestUtil.ToTestableString(obj.SpacesUrl), true);
                Assert.AreEqual("/v2/organizations/d51fd767-8fb3-45b2-b663-7f8a19a524e1/domains", TestUtil.ToTestableString(obj.DomainsUrl), true);
                Assert.AreEqual("/v2/organizations/d51fd767-8fb3-45b2-b663-7f8a19a524e1/private_domains", TestUtil.ToTestableString(obj.PrivateDomainsUrl), true);
                Assert.AreEqual("/v2/organizations/d51fd767-8fb3-45b2-b663-7f8a19a524e1/users", TestUtil.ToTestableString(obj.UsersUrl), true);
                Assert.AreEqual("/v2/organizations/d51fd767-8fb3-45b2-b663-7f8a19a524e1/managers", TestUtil.ToTestableString(obj.ManagersUrl), true);
                Assert.AreEqual("/v2/organizations/d51fd767-8fb3-45b2-b663-7f8a19a524e1/billing_managers", TestUtil.ToTestableString(obj.BillingManagersUrl), true);
                Assert.AreEqual("/v2/organizations/d51fd767-8fb3-45b2-b663-7f8a19a524e1/auditors", TestUtil.ToTestableString(obj.AuditorsUrl), true);
                Assert.AreEqual("/v2/organizations/d51fd767-8fb3-45b2-b663-7f8a19a524e1/app_events", TestUtil.ToTestableString(obj.AppEventsUrl), true);
                Assert.AreEqual("/v2/organizations/d51fd767-8fb3-45b2-b663-7f8a19a524e1/space_quota_definitions", TestUtil.ToTestableString(obj.SpaceQuotaDefinitionsUrl), true);

            }
        }

    }
}